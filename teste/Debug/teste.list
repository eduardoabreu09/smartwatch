
teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08002b60  08002b60  00012b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080033d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004dc  20000070  08003440  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000054c  08003440  0002054c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000120d9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024a9  00000000  00000000  00032171  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e7a  00000000  00000000  0003461a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  0003a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000940  00000000  00000000  0003abb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e4d  00000000  00000000  0003b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026c7  00000000  00000000  00040345  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042a0c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000170c  00000000  00000000  00042a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b48 	.word	0x08002b48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002b48 	.word	0x08002b48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 feac 	bl	8000f80 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f866 	bl	8000300 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 f830 	bl	80002a0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f001 ff57 	bl	8002108 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	200004a0 	.word	0x200004a0

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	200004a0 	.word	0x200004a0

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000282:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000284:	f7ff fff6 	bl	8000274 <HAL_GetTick>
  uint32_t wait = Delay;
 8000288:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800028a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800028c:	1c63      	adds	r3, r4, #1
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	f7ff ffee 	bl	8000274 <HAL_GetTick>
 8000298:	1b40      	subs	r0, r0, r5
 800029a:	42a0      	cmp	r0, r4
 800029c:	d3fa      	bcc.n	8000294 <HAL_Delay+0x14>
  {
  }
}
 800029e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a4:	2800      	cmp	r0, #0
 80002a6:	da14      	bge.n	80002d2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	230f      	movs	r3, #15
 80002aa:	b2c0      	uxtb	r0, r0
 80002ac:	4003      	ands	r3, r0
 80002ae:	3b08      	subs	r3, #8
 80002b0:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <HAL_NVIC_SetPriority+0x58>)
 80002b2:	089b      	lsrs	r3, r3, #2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	189b      	adds	r3, r3, r2
 80002b8:	2203      	movs	r2, #3
 80002ba:	4010      	ands	r0, r2
 80002bc:	4090      	lsls	r0, r2
 80002be:	32fc      	adds	r2, #252	; 0xfc
 80002c0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	69dc      	ldr	r4, [r3, #28]
 80002ca:	43ac      	bics	r4, r5
 80002cc:	4321      	orrs	r1, r4
 80002ce:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d2:	2503      	movs	r5, #3
 80002d4:	0883      	lsrs	r3, r0, #2
 80002d6:	4028      	ands	r0, r5
 80002d8:	40a8      	lsls	r0, r5
 80002da:	35fc      	adds	r5, #252	; 0xfc
 80002dc:	002e      	movs	r6, r5
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_NVIC_SetPriority+0x5c>)
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	189b      	adds	r3, r3, r2
 80002e4:	22c0      	movs	r2, #192	; 0xc0
 80002e6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e8:	4029      	ands	r1, r5
 80002ea:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	589c      	ldr	r4, [r3, r2]
 80002f0:	43b4      	bics	r4, r6
 80002f2:	4321      	orrs	r1, r4
 80002f4:	5099      	str	r1, [r3, r2]
 80002f6:	e7eb      	b.n	80002d0 <HAL_NVIC_SetPriority+0x30>
 80002f8:	e000ed00 	.word	0xe000ed00
 80002fc:	e000e100 	.word	0xe000e100

08000300 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <HAL_SYSTICK_Config+0x28>)
 8000302:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000304:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000306:	4293      	cmp	r3, r2
 8000308:	d80d      	bhi.n	8000326 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000312:	6a03      	ldr	r3, [r0, #32]
 8000314:	0609      	lsls	r1, r1, #24
 8000316:	021b      	lsls	r3, r3, #8
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	430b      	orrs	r3, r1
 800031c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000320:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000322:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000324:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000326:	4770      	bx	lr
 8000328:	00ffffff 	.word	0x00ffffff
 800032c:	e000e010 	.word	0xe000e010
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000336:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000338:	2804      	cmp	r0, #4
 800033a:	d102      	bne.n	8000342 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800033c:	4310      	orrs	r0, r2
 800033e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000340:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000342:	2104      	movs	r1, #4
 8000344:	438a      	bics	r2, r1
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	e7fa      	b.n	8000340 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	e000e010 	.word	0xe000e010

08000350 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000350:	4770      	bx	lr

08000352 <HAL_SYSTICK_IRQHandler>:
{
 8000352:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000354:	f7ff fffc 	bl	8000350 <HAL_SYSTICK_Callback>
}
 8000358:	bd10      	pop	{r4, pc}
	...

0800035c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035e:	680b      	ldr	r3, [r1, #0]
{ 
 8000360:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000362:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000364:	2300      	movs	r3, #0
{ 
 8000366:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000368:	9a02      	ldr	r2, [sp, #8]
 800036a:	40da      	lsrs	r2, r3
 800036c:	d101      	bne.n	8000372 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800036e:	b007      	add	sp, #28
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000372:	2201      	movs	r2, #1
 8000374:	409a      	lsls	r2, r3
 8000376:	9203      	str	r2, [sp, #12]
 8000378:	9903      	ldr	r1, [sp, #12]
 800037a:	9a02      	ldr	r2, [sp, #8]
 800037c:	400a      	ands	r2, r1
 800037e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000380:	d100      	bne.n	8000384 <HAL_GPIO_Init+0x28>
 8000382:	e08c      	b.n	800049e <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000384:	9a01      	ldr	r2, [sp, #4]
 8000386:	2110      	movs	r1, #16
 8000388:	6852      	ldr	r2, [r2, #4]
 800038a:	0016      	movs	r6, r2
 800038c:	438e      	bics	r6, r1
 800038e:	2e02      	cmp	r6, #2
 8000390:	d10e      	bne.n	80003b0 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000392:	2507      	movs	r5, #7
 8000394:	401d      	ands	r5, r3
 8000396:	00ad      	lsls	r5, r5, #2
 8000398:	3901      	subs	r1, #1
 800039a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800039c:	08dc      	lsrs	r4, r3, #3
 800039e:	00a4      	lsls	r4, r4, #2
 80003a0:	1904      	adds	r4, r0, r4
 80003a2:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a4:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003a6:	9901      	ldr	r1, [sp, #4]
 80003a8:	6909      	ldr	r1, [r1, #16]
 80003aa:	40a9      	lsls	r1, r5
 80003ac:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003ae:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003b0:	2403      	movs	r4, #3
 80003b2:	005f      	lsls	r7, r3, #1
 80003b4:	40bc      	lsls	r4, r7
 80003b6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003b8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003bc:	4025      	ands	r5, r4
 80003be:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c0:	2503      	movs	r5, #3
 80003c2:	4015      	ands	r5, r2
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4661      	mov	r1, ip
 80003c8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003ca:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003cc:	2e01      	cmp	r6, #1
 80003ce:	d80f      	bhi.n	80003f0 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003d2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003d6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003dc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003de:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e6:	2101      	movs	r1, #1
 80003e8:	400d      	ands	r5, r1
 80003ea:	409d      	lsls	r5, r3
 80003ec:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003ee:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003f0:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f2:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003f4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f8:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fa:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003fc:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fe:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000400:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000402:	420a      	tst	r2, r1
 8000404:	d04b      	beq.n	800049e <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	2101      	movs	r1, #1
 8000408:	4c26      	ldr	r4, [pc, #152]	; (80004a4 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000410:	430d      	orrs	r5, r1
 8000412:	61a5      	str	r5, [r4, #24]
 8000414:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000416:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000418:	400c      	ands	r4, r1
 800041a:	9405      	str	r4, [sp, #20]
 800041c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	240f      	movs	r4, #15
 8000420:	4921      	ldr	r1, [pc, #132]	; (80004a8 <HAL_GPIO_Init+0x14c>)
 8000422:	00ad      	lsls	r5, r5, #2
 8000424:	00b6      	lsls	r6, r6, #2
 8000426:	186d      	adds	r5, r5, r1
 8000428:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800042c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000430:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000432:	2400      	movs	r4, #0
 8000434:	4288      	cmp	r0, r1
 8000436:	d00c      	beq.n	8000452 <HAL_GPIO_Init+0xf6>
 8000438:	491c      	ldr	r1, [pc, #112]	; (80004ac <HAL_GPIO_Init+0x150>)
 800043a:	3401      	adds	r4, #1
 800043c:	4288      	cmp	r0, r1
 800043e:	d008      	beq.n	8000452 <HAL_GPIO_Init+0xf6>
 8000440:	491b      	ldr	r1, [pc, #108]	; (80004b0 <HAL_GPIO_Init+0x154>)
 8000442:	3401      	adds	r4, #1
 8000444:	4288      	cmp	r0, r1
 8000446:	d004      	beq.n	8000452 <HAL_GPIO_Init+0xf6>
 8000448:	491a      	ldr	r1, [pc, #104]	; (80004b4 <HAL_GPIO_Init+0x158>)
 800044a:	3403      	adds	r4, #3
 800044c:	4288      	cmp	r0, r1
 800044e:	d100      	bne.n	8000452 <HAL_GPIO_Init+0xf6>
 8000450:	3c02      	subs	r4, #2
 8000452:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000454:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000456:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000458:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 800045a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 800045c:	4c16      	ldr	r4, [pc, #88]	; (80004b8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800045e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000460:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8000462:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000464:	03d1      	lsls	r1, r2, #15
 8000466:	d401      	bmi.n	800046c <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000468:	003e      	movs	r6, r7
 800046a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 800046c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800046e:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000470:	9e00      	ldr	r6, [sp, #0]
 8000472:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000474:	0391      	lsls	r1, r2, #14
 8000476:	d401      	bmi.n	800047c <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000478:	003e      	movs	r6, r7
 800047a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800047c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800047e:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000480:	9e00      	ldr	r6, [sp, #0]
 8000482:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000484:	02d1      	lsls	r1, r2, #11
 8000486:	d401      	bmi.n	800048c <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000488:	003e      	movs	r6, r7
 800048a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800048c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800048e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000490:	9f00      	ldr	r7, [sp, #0]
 8000492:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000494:	0292      	lsls	r2, r2, #10
 8000496:	d401      	bmi.n	800049c <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000498:	402e      	ands	r6, r5
 800049a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800049c:	60e7      	str	r7, [r4, #12]
    position++;
 800049e:	3301      	adds	r3, #1
 80004a0:	e762      	b.n	8000368 <HAL_GPIO_Init+0xc>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000
 80004ac:	48000400 	.word	0x48000400
 80004b0:	48000800 	.word	0x48000800
 80004b4:	48000c00 	.word	0x48000c00
 80004b8:	40010400 	.word	0x40010400

080004bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004bc:	6900      	ldr	r0, [r0, #16]
 80004be:	4008      	ands	r0, r1
 80004c0:	1e41      	subs	r1, r0, #1
 80004c2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80004c4:	b2c0      	uxtb	r0, r0
  }
 80004c6:	4770      	bx	lr

080004c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	d001      	beq.n	80004d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004cc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004ce:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004d2:	e7fc      	b.n	80004ce <HAL_GPIO_WritePin+0x6>

080004d4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	699a      	ldr	r2, [r3, #24]
 80004d8:	0792      	lsls	r2, r2, #30
 80004da:	d501      	bpl.n	80004e0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80004e0:	2201      	movs	r2, #1
 80004e2:	6999      	ldr	r1, [r3, #24]
 80004e4:	4211      	tst	r1, r2
 80004e6:	d102      	bne.n	80004ee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80004e8:	6999      	ldr	r1, [r3, #24]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	619a      	str	r2, [r3, #24]
  }
}
 80004ee:	4770      	bx	lr

080004f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80004f0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80004f2:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 80004f6:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004f8:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80004fa:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80004fc:	9d03      	ldr	r5, [sp, #12]
 80004fe:	0d89      	lsrs	r1, r1, #22
 8000500:	432b      	orrs	r3, r5
 8000502:	4319      	orrs	r1, r3
 8000504:	0412      	lsls	r2, r2, #16
 8000506:	430a      	orrs	r2, r1
 8000508:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800050a:	6062      	str	r2, [r4, #4]
}
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	fc009800 	.word	0xfc009800

08000514 <I2C_WaitOnFlagUntilTimeout>:
{
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	0004      	movs	r4, r0
 8000518:	000e      	movs	r6, r1
 800051a:	0017      	movs	r7, r2
 800051c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800051e:	6822      	ldr	r2, [r4, #0]
 8000520:	6993      	ldr	r3, [r2, #24]
 8000522:	4033      	ands	r3, r6
 8000524:	1b9b      	subs	r3, r3, r6
 8000526:	4259      	negs	r1, r3
 8000528:	414b      	adcs	r3, r1
 800052a:	42bb      	cmp	r3, r7
 800052c:	d001      	beq.n	8000532 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800052e:	2000      	movs	r0, #0
 8000530:	e00e      	b.n	8000550 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000532:	1c6b      	adds	r3, r5, #1
 8000534:	d0f4      	beq.n	8000520 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000536:	2d00      	cmp	r5, #0
 8000538:	d10b      	bne.n	8000552 <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 800053a:	0023      	movs	r3, r4
 800053c:	2220      	movs	r2, #32
 800053e:	3341      	adds	r3, #65	; 0x41
 8000540:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000542:	0022      	movs	r2, r4
 8000544:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000546:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000548:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800054a:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800054c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800054e:	7023      	strb	r3, [r4, #0]
}
 8000550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000552:	f7ff fe8f 	bl	8000274 <HAL_GetTick>
 8000556:	9b06      	ldr	r3, [sp, #24]
 8000558:	1ac0      	subs	r0, r0, r3
 800055a:	4285      	cmp	r5, r0
 800055c:	d2df      	bcs.n	800051e <I2C_WaitOnFlagUntilTimeout+0xa>
 800055e:	e7ec      	b.n	800053a <I2C_WaitOnFlagUntilTimeout+0x26>

08000560 <I2C_IsAcknowledgeFailed>:
{
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000562:	6803      	ldr	r3, [r0, #0]
{
 8000564:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000566:	6998      	ldr	r0, [r3, #24]
 8000568:	2310      	movs	r3, #16
{
 800056a:	000e      	movs	r6, r1
 800056c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800056e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000570:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000572:	2800      	cmp	r0, #0
 8000574:	d115      	bne.n	80005a2 <I2C_IsAcknowledgeFailed+0x42>
}
 8000576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	d013      	beq.n	80005a4 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800057c:	2e00      	cmp	r6, #0
 800057e:	d10b      	bne.n	8000598 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8000580:	0023      	movs	r3, r4
 8000582:	2220      	movs	r2, #32
 8000584:	3341      	adds	r3, #65	; 0x41
 8000586:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000588:	0022      	movs	r2, r4
 800058a:	2300      	movs	r3, #0
 800058c:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800058e:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000590:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 8000592:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 8000594:	7023      	strb	r3, [r4, #0]
 8000596:	e7ee      	b.n	8000576 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000598:	f7ff fe6c 	bl	8000274 <HAL_GetTick>
 800059c:	1bc0      	subs	r0, r0, r7
 800059e:	4286      	cmp	r6, r0
 80005a0:	d3ee      	bcc.n	8000580 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	422a      	tst	r2, r5
 80005a8:	d0e6      	beq.n	8000578 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005aa:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80005ac:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005ae:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005b0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80005b2:	f7ff ff8f 	bl	80004d4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80005b6:	6822      	ldr	r2, [r4, #0]
 80005b8:	4908      	ldr	r1, [pc, #32]	; (80005dc <I2C_IsAcknowledgeFailed+0x7c>)
 80005ba:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80005bc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80005be:	400b      	ands	r3, r1
 80005c0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80005c2:	2304      	movs	r3, #4
 80005c4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80005c6:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005c8:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80005ca:	3341      	adds	r3, #65	; 0x41
 80005cc:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005d2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d4:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80005d6:	7023      	strb	r3, [r4, #0]
 80005d8:	e7cd      	b.n	8000576 <I2C_IsAcknowledgeFailed+0x16>
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	fe00e800 	.word	0xfe00e800

080005e0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	0004      	movs	r4, r0
 80005e4:	000d      	movs	r5, r1
 80005e6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80005e8:	2702      	movs	r7, #2
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	423b      	tst	r3, r7
 80005f0:	d001      	beq.n	80005f6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80005f2:	2000      	movs	r0, #0
 80005f4:	e018      	b.n	8000628 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80005f6:	0032      	movs	r2, r6
 80005f8:	0029      	movs	r1, r5
 80005fa:	0020      	movs	r0, r4
 80005fc:	f7ff ffb0 	bl	8000560 <I2C_IsAcknowledgeFailed>
 8000600:	2800      	cmp	r0, #0
 8000602:	d118      	bne.n	8000636 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8000604:	1c6b      	adds	r3, r5, #1
 8000606:	d0f0      	beq.n	80005ea <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000608:	2d00      	cmp	r5, #0
 800060a:	d10e      	bne.n	800062a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060c:	2220      	movs	r2, #32
 800060e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000610:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000612:	4313      	orrs	r3, r2
 8000614:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000616:	0023      	movs	r3, r4
 8000618:	3341      	adds	r3, #65	; 0x41
 800061a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800061c:	0022      	movs	r2, r4
 800061e:	2300      	movs	r3, #0
 8000620:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000622:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000624:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000626:	7023      	strb	r3, [r4, #0]
}
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800062a:	f7ff fe23 	bl	8000274 <HAL_GetTick>
 800062e:	1b80      	subs	r0, r0, r6
 8000630:	4285      	cmp	r5, r0
 8000632:	d2da      	bcs.n	80005ea <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8000634:	e7ea      	b.n	800060c <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8000636:	2001      	movs	r0, #1
 8000638:	e7f6      	b.n	8000628 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

0800063a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800063a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063c:	0004      	movs	r4, r0
 800063e:	000d      	movs	r5, r1
 8000640:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000642:	2720      	movs	r7, #32
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	423b      	tst	r3, r7
 800064a:	d001      	beq.n	8000650 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800064c:	2000      	movs	r0, #0
 800064e:	e016      	b.n	800067e <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000650:	0032      	movs	r2, r6
 8000652:	0029      	movs	r1, r5
 8000654:	0020      	movs	r0, r4
 8000656:	f7ff ff83 	bl	8000560 <I2C_IsAcknowledgeFailed>
 800065a:	2800      	cmp	r0, #0
 800065c:	d116      	bne.n	800068c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800065e:	2d00      	cmp	r5, #0
 8000660:	d10e      	bne.n	8000680 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000662:	2220      	movs	r2, #32
 8000664:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000666:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000668:	4313      	orrs	r3, r2
 800066a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800066c:	0023      	movs	r3, r4
 800066e:	3341      	adds	r3, #65	; 0x41
 8000670:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000672:	0022      	movs	r2, r4
 8000674:	2300      	movs	r3, #0
 8000676:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000678:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800067a:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800067c:	7023      	strb	r3, [r4, #0]
}
 800067e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000680:	f7ff fdf8 	bl	8000274 <HAL_GetTick>
 8000684:	1b80      	subs	r0, r0, r6
 8000686:	4285      	cmp	r5, r0
 8000688:	d2dc      	bcs.n	8000644 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800068a:	e7ea      	b.n	8000662 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
 800068e:	e7f6      	b.n	800067e <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08000690 <HAL_I2C_Init>:
{
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000694:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000696:	2c00      	cmp	r4, #0
 8000698:	d03f      	beq.n	800071a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800069a:	0025      	movs	r5, r4
 800069c:	3541      	adds	r5, #65	; 0x41
 800069e:	782b      	ldrb	r3, [r5, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d105      	bne.n	80006b2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80006a6:	0022      	movs	r2, r4
 80006a8:	3240      	adds	r2, #64	; 0x40
 80006aa:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80006ac:	0020      	movs	r0, r4
 80006ae:	f001 fd53 	bl	8002158 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006b2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006b4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006b6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80006b8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006ba:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	68a6      	ldr	r6, [r4, #8]
 80006c0:	438a      	bics	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80006c4:	6861      	ldr	r1, [r4, #4]
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <HAL_I2C_Init+0xa0>)
 80006c8:	400a      	ands	r2, r1
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80006cc:	6899      	ldr	r1, [r3, #8]
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <HAL_I2C_Init+0xa4>)
 80006d0:	4011      	ands	r1, r2
 80006d2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80006d4:	2801      	cmp	r0, #1
 80006d6:	d121      	bne.n	800071c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0209      	lsls	r1, r1, #8
 80006dc:	4331      	orrs	r1, r6
 80006de:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80006e0:	6858      	ldr	r0, [r3, #4]
 80006e2:	4915      	ldr	r1, [pc, #84]	; (8000738 <HAL_I2C_Init+0xa8>)
 80006e4:	4301      	orrs	r1, r0
 80006e6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006e8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006ea:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80006ec:	400a      	ands	r2, r1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80006f0:	6961      	ldr	r1, [r4, #20]
 80006f2:	6922      	ldr	r2, [r4, #16]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	69a1      	ldr	r1, [r4, #24]
 80006f8:	0209      	lsls	r1, r1, #8
 80006fa:	430a      	orrs	r2, r1
 80006fc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006fe:	6a21      	ldr	r1, [r4, #32]
 8000700:	69e2      	ldr	r2, [r4, #28]
 8000702:	430a      	orrs	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000706:	2201      	movs	r2, #1
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800070e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000710:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000712:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000714:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000716:	3442      	adds	r4, #66	; 0x42
 8000718:	7020      	strb	r0, [r4, #0]
}
 800071a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800071c:	2184      	movs	r1, #132	; 0x84
 800071e:	0209      	lsls	r1, r1, #8
 8000720:	4331      	orrs	r1, r6
 8000722:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000724:	2802      	cmp	r0, #2
 8000726:	d1db      	bne.n	80006e0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0109      	lsls	r1, r1, #4
 800072c:	6059      	str	r1, [r3, #4]
 800072e:	e7d7      	b.n	80006e0 <HAL_I2C_Init+0x50>
 8000730:	f0ffffff 	.word	0xf0ffffff
 8000734:	ffff7fff 	.word	0xffff7fff
 8000738:	02008000 	.word	0x02008000

0800073c <HAL_I2C_Master_Transmit>:
{
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800073e:	0005      	movs	r5, r0
{
 8000740:	b087      	sub	sp, #28
 8000742:	9103      	str	r1, [sp, #12]
 8000744:	9204      	str	r2, [sp, #16]
 8000746:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000748:	3541      	adds	r5, #65	; 0x41
 800074a:	782b      	ldrb	r3, [r5, #0]
{
 800074c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800074e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000750:	2b20      	cmp	r3, #32
 8000752:	d157      	bne.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 8000754:	0023      	movs	r3, r4
 8000756:	3340      	adds	r3, #64	; 0x40
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	2a01      	cmp	r2, #1
 800075c:	d052      	beq.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
 800075e:	2601      	movs	r6, #1
 8000760:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000762:	f7ff fd87 	bl	8000274 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000766:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000768:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800076a:	9000      	str	r0, [sp, #0]
 800076c:	2319      	movs	r3, #25
 800076e:	0032      	movs	r2, r6
 8000770:	0209      	lsls	r1, r1, #8
 8000772:	0020      	movs	r0, r4
 8000774:	f7ff fece 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 8000778:	2800      	cmp	r0, #0
 800077a:	d142      	bne.n	8000802 <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800077c:	2321      	movs	r3, #33	; 0x21
 800077e:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000780:	3b11      	subs	r3, #17
 8000782:	19ad      	adds	r5, r5, r6
 8000784:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000786:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000788:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800078a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800078c:	466b      	mov	r3, sp
 800078e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000790:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000792:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000794:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000796:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000798:	019b      	lsls	r3, r3, #6
 800079a:	2aff      	cmp	r2, #255	; 0xff
 800079c:	d921      	bls.n	80007e2 <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	045b      	lsls	r3, r3, #17
 80007a8:	9903      	ldr	r1, [sp, #12]
 80007aa:	0020      	movs	r0, r4
 80007ac:	f7ff fea0 	bl	80004f0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80007b0:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80007b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007b4:	003a      	movs	r2, r7
 80007b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80007b8:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d119      	bne.n	80007f2 <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007be:	f7ff ff3c 	bl	800063a <I2C_WaitOnSTOPFlagUntilTimeout>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d119      	bne.n	80007fa <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007c6:	2120      	movs	r1, #32
 80007c8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80007ca:	4e27      	ldr	r6, [pc, #156]	; (8000868 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007cc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	4032      	ands	r2, r6
 80007d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80007d4:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80007d6:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80007d8:	3341      	adds	r3, #65	; 0x41
 80007da:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80007dc:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80007de:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80007e0:	e010      	b.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 80007e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80007e4:	b292      	uxth	r2, r2
 80007e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	049b      	lsls	r3, r3, #18
 80007f0:	e7da      	b.n	80007a8 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007f2:	f7ff fef5 	bl	80005e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d006      	beq.n	8000808 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80007fc:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d000      	beq.n	8000804 <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 8000802:	2003      	movs	r0, #3
}
 8000804:	b007      	add	sp, #28
 8000806:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	1c59      	adds	r1, r3, #1
 800080e:	6261      	str	r1, [r4, #36]	; 0x24
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000816:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000818:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800081a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800081c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800081e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000820:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000822:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000824:	2a00      	cmp	r2, #0
 8000826:	d1c4      	bne.n	80007b2 <HAL_I2C_Master_Transmit+0x76>
 8000828:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0c1      	beq.n	80007b2 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800082e:	9700      	str	r7, [sp, #0]
 8000830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	0020      	movs	r0, r4
 8000836:	f7ff fe6d 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 800083a:	2800      	cmp	r0, #0
 800083c:	d1e1      	bne.n	8000802 <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800083e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000840:	2bff      	cmp	r3, #255	; 0xff
 8000842:	d909      	bls.n	8000858 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000848:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800084a:	045b      	lsls	r3, r3, #17
 800084c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800084e:	9903      	ldr	r1, [sp, #12]
 8000850:	0020      	movs	r0, r4
 8000852:	f7ff fe4d 	bl	80004f0 <I2C_TransferConfig>
 8000856:	e7ac      	b.n	80007b2 <HAL_I2C_Master_Transmit+0x76>
 8000858:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800085a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800085c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800085e:	b292      	uxth	r2, r2
 8000860:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	9000      	str	r0, [sp, #0]
 8000866:	e7f2      	b.n	800084e <HAL_I2C_Master_Transmit+0x112>
 8000868:	fe00e800 	.word	0xfe00e800

0800086c <HAL_I2C_IsDeviceReady>:
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	9105      	str	r1, [sp, #20]
 8000872:	001d      	movs	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000874:	0001      	movs	r1, r0
  __IO uint32_t I2C_Trials = 0U;
 8000876:	2300      	movs	r3, #0
{
 8000878:	9204      	str	r2, [sp, #16]
  __IO uint32_t I2C_Trials = 0U;
 800087a:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800087c:	3141      	adds	r1, #65	; 0x41
 800087e:	780b      	ldrb	r3, [r1, #0]
{
 8000880:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000882:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
 8000884:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000886:	2b20      	cmp	r3, #32
 8000888:	d155      	bne.n	8000936 <HAL_I2C_IsDeviceReady+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800088a:	6822      	ldr	r2, [r4, #0]
 800088c:	6996      	ldr	r6, [r2, #24]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0212      	lsls	r2, r2, #8
 8000892:	4032      	ands	r2, r6
 8000894:	d14f      	bne.n	8000936 <HAL_I2C_IsDeviceReady+0xca>
    __HAL_LOCK(hi2c);
 8000896:	0026      	movs	r6, r4
 8000898:	3640      	adds	r6, #64	; 0x40
 800089a:	7837      	ldrb	r7, [r6, #0]
 800089c:	2f01      	cmp	r7, #1
 800089e:	d04a      	beq.n	8000936 <HAL_I2C_IsDeviceReady+0xca>
 80008a0:	3801      	subs	r0, #1
 80008a2:	7030      	strb	r0, [r6, #0]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80008a4:	001e      	movs	r6, r3
    hi2c->State = HAL_I2C_STATE_BUSY;
 80008a6:	3023      	adds	r0, #35	; 0x23
 80008a8:	7008      	strb	r0, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008aa:	6462      	str	r2, [r4, #68]	; 0x44
 80008ac:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80008ae:	68e1      	ldr	r1, [r4, #12]
 80008b0:	059b      	lsls	r3, r3, #22
 80008b2:	6822      	ldr	r2, [r4, #0]
 80008b4:	0d9b      	lsrs	r3, r3, #22
 80008b6:	2901      	cmp	r1, #1
 80008b8:	d11a      	bne.n	80008f0 <HAL_I2C_IsDeviceReady+0x84>
 80008ba:	4936      	ldr	r1, [pc, #216]	; (8000994 <HAL_I2C_IsDeviceReady+0x128>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80008c0:	f7ff fcd8 	bl	8000274 <HAL_GetTick>
 80008c4:	9003      	str	r0, [sp, #12]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80008c6:	0027      	movs	r7, r4
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	3741      	adds	r7, #65	; 0x41
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	4232      	tst	r2, r6
 80008d0:	d018      	beq.n	8000904 <HAL_I2C_IsDeviceReady+0x98>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80008d2:	2710      	movs	r7, #16
 80008d4:	699a      	ldr	r2, [r3, #24]
 80008d6:	403a      	ands	r2, r7
 80008d8:	d12f      	bne.n	800093a <HAL_I2C_IsDeviceReady+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80008da:	9b03      	ldr	r3, [sp, #12]
 80008dc:	2120      	movs	r1, #32
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	0020      	movs	r0, r4
 80008e2:	002b      	movs	r3, r5
 80008e4:	f7ff fe16 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d01c      	beq.n	8000926 <HAL_I2C_IsDeviceReady+0xba>
    return HAL_TIMEOUT;
 80008ec:	2003      	movs	r0, #3
 80008ee:	e022      	b.n	8000936 <HAL_I2C_IsDeviceReady+0xca>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80008f0:	21a0      	movs	r1, #160	; 0xa0
 80008f2:	0189      	lsls	r1, r1, #6
 80008f4:	e7e2      	b.n	80008bc <HAL_I2C_IsDeviceReady+0x50>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80008f6:	f7ff fcbd 	bl	8000274 <HAL_GetTick>
 80008fa:	9b03      	ldr	r3, [sp, #12]
 80008fc:	1ac0      	subs	r0, r0, r3
 80008fe:	4285      	cmp	r5, r0
 8000900:	d2e1      	bcs.n	80008c6 <HAL_I2C_IsDeviceReady+0x5a>
 8000902:	e00a      	b.n	800091a <HAL_I2C_IsDeviceReady+0xae>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8000904:	2110      	movs	r1, #16
 8000906:	699a      	ldr	r2, [r3, #24]
 8000908:	420a      	tst	r2, r1
 800090a:	d1e2      	bne.n	80008d2 <HAL_I2C_IsDeviceReady+0x66>
 800090c:	783a      	ldrb	r2, [r7, #0]
 800090e:	2aa0      	cmp	r2, #160	; 0xa0
 8000910:	d0df      	beq.n	80008d2 <HAL_I2C_IsDeviceReady+0x66>
        if (Timeout != HAL_MAX_DELAY)
 8000912:	1c6a      	adds	r2, r5, #1
 8000914:	d0da      	beq.n	80008cc <HAL_I2C_IsDeviceReady+0x60>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000916:	2d00      	cmp	r5, #0
 8000918:	d1ed      	bne.n	80008f6 <HAL_I2C_IsDeviceReady+0x8a>
            hi2c->State = HAL_I2C_STATE_READY;
 800091a:	2320      	movs	r3, #32
 800091c:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hi2c);
 800091e:	2300      	movs	r3, #0
 8000920:	3440      	adds	r4, #64	; 0x40
 8000922:	7023      	strb	r3, [r4, #0]
 8000924:	e7e2      	b.n	80008ec <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000926:	2320      	movs	r3, #32
 8000928:	6822      	ldr	r2, [r4, #0]
 800092a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800092c:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 800092e:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000930:	3241      	adds	r2, #65	; 0x41
 8000932:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000934:	7020      	strb	r0, [r4, #0]
}
 8000936:	b009      	add	sp, #36	; 0x24
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800093a:	9b03      	ldr	r3, [sp, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	0031      	movs	r1, r6
 8000942:	002b      	movs	r3, r5
 8000944:	0020      	movs	r0, r4
 8000946:	f7ff fde5 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 800094a:	1e02      	subs	r2, r0, #0
 800094c:	d1ce      	bne.n	80008ec <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000952:	61de      	str	r6, [r3, #28]
      if (I2C_Trials++ == Trials)
 8000954:	9907      	ldr	r1, [sp, #28]
 8000956:	1c48      	adds	r0, r1, #1
 8000958:	9007      	str	r0, [sp, #28]
 800095a:	9804      	ldr	r0, [sp, #16]
 800095c:	4281      	cmp	r1, r0
 800095e:	d10f      	bne.n	8000980 <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	6858      	ldr	r0, [r3, #4]
 8000964:	01c9      	lsls	r1, r1, #7
 8000966:	4301      	orrs	r1, r0
 8000968:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800096a:	9b03      	ldr	r3, [sp, #12]
 800096c:	0031      	movs	r1, r6
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	0020      	movs	r0, r4
 8000972:	002b      	movs	r3, r5
 8000974:	f7ff fdce 	bl	8000514 <I2C_WaitOnFlagUntilTimeout>
 8000978:	2800      	cmp	r0, #0
 800097a:	d1b7      	bne.n	80008ec <HAL_I2C_IsDeviceReady+0x80>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	61de      	str	r6, [r3, #28]
    while (I2C_Trials < Trials);
 8000980:	9b07      	ldr	r3, [sp, #28]
 8000982:	9a04      	ldr	r2, [sp, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d900      	bls.n	800098a <HAL_I2C_IsDeviceReady+0x11e>
 8000988:	e790      	b.n	80008ac <HAL_I2C_IsDeviceReady+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 800098a:	0023      	movs	r3, r4
 800098c:	2220      	movs	r2, #32
 800098e:	3341      	adds	r3, #65	; 0x41
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e7c4      	b.n	800091e <HAL_I2C_IsDeviceReady+0xb2>
 8000994:	02002000 	.word	0x02002000

08000998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000998:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800099a:	0004      	movs	r4, r0
 800099c:	3441      	adds	r4, #65	; 0x41
 800099e:	7822      	ldrb	r2, [r4, #0]
{
 80009a0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009a2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80009a4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009a6:	2a20      	cmp	r2, #32
 80009a8:	d118      	bne.n	80009dc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80009aa:	001d      	movs	r5, r3
 80009ac:	3540      	adds	r5, #64	; 0x40
 80009ae:	782e      	ldrb	r6, [r5, #0]
 80009b0:	2e01      	cmp	r6, #1
 80009b2:	d013      	beq.n	80009dc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80009b4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80009b6:	3022      	adds	r0, #34	; 0x22
 80009b8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80009ba:	681e      	ldr	r6, [r3, #0]
 80009bc:	3823      	subs	r0, #35	; 0x23
 80009be:	4386      	bics	r6, r0
 80009c0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009c2:	681e      	ldr	r6, [r3, #0]
 80009c4:	4f06      	ldr	r7, [pc, #24]	; (80009e0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80009c6:	403e      	ands	r6, r7
 80009c8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80009ca:	681e      	ldr	r6, [r3, #0]
 80009cc:	4331      	orrs	r1, r6
 80009ce:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	4308      	orrs	r0, r1
 80009d4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80009d6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80009d8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80009da:	7028      	strb	r0, [r5, #0]
  }
}
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	ffffefff 	.word	0xffffefff

080009e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009e6:	0005      	movs	r5, r0
 80009e8:	3541      	adds	r5, #65	; 0x41
 80009ea:	782a      	ldrb	r2, [r5, #0]
{
 80009ec:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009ee:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80009f0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009f2:	2a20      	cmp	r2, #32
 80009f4:	d117      	bne.n	8000a26 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80009f6:	001c      	movs	r4, r3
 80009f8:	3440      	adds	r4, #64	; 0x40
 80009fa:	7826      	ldrb	r6, [r4, #0]
 80009fc:	2e01      	cmp	r6, #1
 80009fe:	d012      	beq.n	8000a26 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000a00:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a02:	3022      	adds	r0, #34	; 0x22
 8000a04:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000a06:	681e      	ldr	r6, [r3, #0]
 8000a08:	3823      	subs	r0, #35	; 0x23
 8000a0a:	4386      	bics	r6, r0
 8000a0c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000a0e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000a10:	4f05      	ldr	r7, [pc, #20]	; (8000a28 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000a12:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000a14:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000a16:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000a18:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	4308      	orrs	r0, r1
 8000a1e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a20:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a22:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000a24:	7020      	strb	r0, [r4, #0]
  }
}
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a28:	fffff0ff 	.word	0xfffff0ff

08000a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a2e:	6803      	ldr	r3, [r0, #0]
{
 8000a30:	b085      	sub	sp, #20
 8000a32:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a34:	07db      	lsls	r3, r3, #31
 8000a36:	d42f      	bmi.n	8000a98 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	079b      	lsls	r3, r3, #30
 8000a3c:	d500      	bpl.n	8000a40 <HAL_RCC_OscConfig+0x14>
 8000a3e:	e081      	b.n	8000b44 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	071b      	lsls	r3, r3, #28
 8000a44:	d500      	bpl.n	8000a48 <HAL_RCC_OscConfig+0x1c>
 8000a46:	e0bc      	b.n	8000bc2 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	075b      	lsls	r3, r3, #29
 8000a4c:	d500      	bpl.n	8000a50 <HAL_RCC_OscConfig+0x24>
 8000a4e:	e0df      	b.n	8000c10 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	06db      	lsls	r3, r3, #27
 8000a54:	d51a      	bpl.n	8000a8c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a56:	696a      	ldr	r2, [r5, #20]
 8000a58:	4cb5      	ldr	r4, [pc, #724]	; (8000d30 <HAL_RCC_OscConfig+0x304>)
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	2a01      	cmp	r2, #1
 8000a5e:	d000      	beq.n	8000a62 <HAL_RCC_OscConfig+0x36>
 8000a60:	e14b      	b.n	8000cfa <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a62:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a64:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a66:	430b      	orrs	r3, r1
 8000a68:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a70:	f7ff fc00 	bl	8000274 <HAL_GetTick>
 8000a74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a78:	4233      	tst	r3, r6
 8000a7a:	d100      	bne.n	8000a7e <HAL_RCC_OscConfig+0x52>
 8000a7c:	e136      	b.n	8000cec <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a7e:	21f8      	movs	r1, #248	; 0xf8
 8000a80:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a82:	69ab      	ldr	r3, [r5, #24]
 8000a84:	438a      	bics	r2, r1
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a8c:	6a29      	ldr	r1, [r5, #32]
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d000      	beq.n	8000a94 <HAL_RCC_OscConfig+0x68>
 8000a92:	e159      	b.n	8000d48 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a94:	2000      	movs	r0, #0
 8000a96:	e013      	b.n	8000ac0 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a98:	210c      	movs	r1, #12
 8000a9a:	4ca5      	ldr	r4, [pc, #660]	; (8000d30 <HAL_RCC_OscConfig+0x304>)
 8000a9c:	6862      	ldr	r2, [r4, #4]
 8000a9e:	400a      	ands	r2, r1
 8000aa0:	2a04      	cmp	r2, #4
 8000aa2:	d006      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	d10b      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x98>
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	03db      	lsls	r3, r3, #15
 8000ab0:	d508      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	039b      	lsls	r3, r3, #14
 8000ab6:	d5bf      	bpl.n	8000a38 <HAL_RCC_OscConfig+0xc>
 8000ab8:	686b      	ldr	r3, [r5, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1bc      	bne.n	8000a38 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000abe:	2001      	movs	r0, #1
}
 8000ac0:	b005      	add	sp, #20
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac4:	686b      	ldr	r3, [r5, #4]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d113      	bne.n	8000af2 <HAL_RCC_OscConfig+0xc6>
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	6822      	ldr	r2, [r4, #0]
 8000ace:	025b      	lsls	r3, r3, #9
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fbce 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ada:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000adc:	02b6      	lsls	r6, r6, #10
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	4233      	tst	r3, r6
 8000ae2:	d1a9      	bne.n	8000a38 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ae4:	f7ff fbc6 	bl	8000274 <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2864      	cmp	r0, #100	; 0x64
 8000aec:	d9f7      	bls.n	8000ade <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000aee:	2003      	movs	r0, #3
 8000af0:	e7e6      	b.n	8000ac0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d116      	bne.n	8000b24 <HAL_RCC_OscConfig+0xf8>
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	4a8e      	ldr	r2, [pc, #568]	; (8000d34 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000afa:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afc:	4013      	ands	r3, r2
 8000afe:	6023      	str	r3, [r4, #0]
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	4a8d      	ldr	r2, [pc, #564]	; (8000d38 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b06:	4013      	ands	r3, r2
 8000b08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b0a:	f7ff fbb3 	bl	8000274 <HAL_GetTick>
 8000b0e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	4233      	tst	r3, r6
 8000b14:	d100      	bne.n	8000b18 <HAL_RCC_OscConfig+0xec>
 8000b16:	e78f      	b.n	8000a38 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b18:	f7ff fbac 	bl	8000274 <HAL_GetTick>
 8000b1c:	1bc0      	subs	r0, r0, r7
 8000b1e:	2864      	cmp	r0, #100	; 0x64
 8000b20:	d9f6      	bls.n	8000b10 <HAL_RCC_OscConfig+0xe4>
 8000b22:	e7e4      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b24:	2b05      	cmp	r3, #5
 8000b26:	d105      	bne.n	8000b34 <HAL_RCC_OscConfig+0x108>
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	6822      	ldr	r2, [r4, #0]
 8000b2c:	02db      	lsls	r3, r3, #11
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	6023      	str	r3, [r4, #0]
 8000b32:	e7ca      	b.n	8000aca <HAL_RCC_OscConfig+0x9e>
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	4a7f      	ldr	r2, [pc, #508]	; (8000d34 <HAL_RCC_OscConfig+0x308>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	6023      	str	r3, [r4, #0]
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	4a7e      	ldr	r2, [pc, #504]	; (8000d38 <HAL_RCC_OscConfig+0x30c>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	e7c6      	b.n	8000ad2 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b44:	220c      	movs	r2, #12
 8000b46:	4c7a      	ldr	r4, [pc, #488]	; (8000d30 <HAL_RCC_OscConfig+0x304>)
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	4213      	tst	r3, r2
 8000b4c:	d006      	beq.n	8000b5c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d110      	bne.n	8000b78 <HAL_RCC_OscConfig+0x14c>
 8000b56:	6863      	ldr	r3, [r4, #4]
 8000b58:	03db      	lsls	r3, r3, #15
 8000b5a:	d40d      	bmi.n	8000b78 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	079b      	lsls	r3, r3, #30
 8000b60:	d502      	bpl.n	8000b68 <HAL_RCC_OscConfig+0x13c>
 8000b62:	68eb      	ldr	r3, [r5, #12]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d1aa      	bne.n	8000abe <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b68:	21f8      	movs	r1, #248	; 0xf8
 8000b6a:	6822      	ldr	r2, [r4, #0]
 8000b6c:	692b      	ldr	r3, [r5, #16]
 8000b6e:	438a      	bics	r2, r1
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	e763      	b.n	8000a40 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b78:	68ea      	ldr	r2, [r5, #12]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d00f      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000b80:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b82:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b88:	f7ff fb74 	bl	8000274 <HAL_GetTick>
 8000b8c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	4233      	tst	r3, r6
 8000b92:	d1e9      	bne.n	8000b68 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b94:	f7ff fb6e 	bl	8000274 <HAL_GetTick>
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f7      	bls.n	8000b8e <HAL_RCC_OscConfig+0x162>
 8000b9e:	e7a6      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000ba0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ba4:	439a      	bics	r2, r3
 8000ba6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000ba8:	f7ff fb64 	bl	8000274 <HAL_GetTick>
 8000bac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	4233      	tst	r3, r6
 8000bb2:	d100      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x18a>
 8000bb4:	e744      	b.n	8000a40 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fb5d 	bl	8000274 <HAL_GetTick>
 8000bba:	1bc0      	subs	r0, r0, r7
 8000bbc:	2802      	cmp	r0, #2
 8000bbe:	d9f6      	bls.n	8000bae <HAL_RCC_OscConfig+0x182>
 8000bc0:	e795      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bc2:	69ea      	ldr	r2, [r5, #28]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4c5a      	ldr	r4, [pc, #360]	; (8000d30 <HAL_RCC_OscConfig+0x304>)
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d010      	beq.n	8000bee <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000bcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bce:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bd4:	f7ff fb4e 	bl	8000274 <HAL_GetTick>
 8000bd8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bdc:	4233      	tst	r3, r6
 8000bde:	d000      	beq.n	8000be2 <HAL_RCC_OscConfig+0x1b6>
 8000be0:	e732      	b.n	8000a48 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000be2:	f7ff fb47 	bl	8000274 <HAL_GetTick>
 8000be6:	1bc0      	subs	r0, r0, r7
 8000be8:	2802      	cmp	r0, #2
 8000bea:	d9f6      	bls.n	8000bda <HAL_RCC_OscConfig+0x1ae>
 8000bec:	e77f      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000bee:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000bf2:	439a      	bics	r2, r3
 8000bf4:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bf6:	f7ff fb3d 	bl	8000274 <HAL_GetTick>
 8000bfa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bfe:	4233      	tst	r3, r6
 8000c00:	d100      	bne.n	8000c04 <HAL_RCC_OscConfig+0x1d8>
 8000c02:	e721      	b.n	8000a48 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c04:	f7ff fb36 	bl	8000274 <HAL_GetTick>
 8000c08:	1bc0      	subs	r0, r0, r7
 8000c0a:	2802      	cmp	r0, #2
 8000c0c:	d9f6      	bls.n	8000bfc <HAL_RCC_OscConfig+0x1d0>
 8000c0e:	e76e      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c10:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c12:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c14:	4c46      	ldr	r4, [pc, #280]	; (8000d30 <HAL_RCC_OscConfig+0x304>)
 8000c16:	0552      	lsls	r2, r2, #21
 8000c18:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c1a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c1c:	4213      	tst	r3, r2
 8000c1e:	d108      	bne.n	8000c32 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	69e3      	ldr	r3, [r4, #28]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61e3      	str	r3, [r4, #28]
 8000c26:	69e3      	ldr	r3, [r4, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	9303      	str	r3, [sp, #12]
 8000c2c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c32:	2780      	movs	r7, #128	; 0x80
 8000c34:	4e41      	ldr	r6, [pc, #260]	; (8000d3c <HAL_RCC_OscConfig+0x310>)
 8000c36:	007f      	lsls	r7, r7, #1
 8000c38:	6833      	ldr	r3, [r6, #0]
 8000c3a:	423b      	tst	r3, r7
 8000c3c:	d006      	beq.n	8000c4c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c3e:	68ab      	ldr	r3, [r5, #8]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d113      	bne.n	8000c6c <HAL_RCC_OscConfig+0x240>
 8000c44:	6a22      	ldr	r2, [r4, #32]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	6223      	str	r3, [r4, #32]
 8000c4a:	e030      	b.n	8000cae <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c4c:	6833      	ldr	r3, [r6, #0]
 8000c4e:	433b      	orrs	r3, r7
 8000c50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c52:	f7ff fb0f 	bl	8000274 <HAL_GetTick>
 8000c56:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c58:	6833      	ldr	r3, [r6, #0]
 8000c5a:	423b      	tst	r3, r7
 8000c5c:	d1ef      	bne.n	8000c3e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c5e:	f7ff fb09 	bl	8000274 <HAL_GetTick>
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	1ac0      	subs	r0, r0, r3
 8000c66:	2864      	cmp	r0, #100	; 0x64
 8000c68:	d9f6      	bls.n	8000c58 <HAL_RCC_OscConfig+0x22c>
 8000c6a:	e740      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
 8000c6c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d114      	bne.n	8000c9c <HAL_RCC_OscConfig+0x270>
 8000c72:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c74:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c76:	4393      	bics	r3, r2
 8000c78:	6223      	str	r3, [r4, #32]
 8000c7a:	6a23      	ldr	r3, [r4, #32]
 8000c7c:	3203      	adds	r2, #3
 8000c7e:	4393      	bics	r3, r2
 8000c80:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c82:	f7ff faf7 	bl	8000274 <HAL_GetTick>
 8000c86:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c88:	6a23      	ldr	r3, [r4, #32]
 8000c8a:	423b      	tst	r3, r7
 8000c8c:	d025      	beq.n	8000cda <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c8e:	f7ff faf1 	bl	8000274 <HAL_GetTick>
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <HAL_RCC_OscConfig+0x314>)
 8000c94:	1b80      	subs	r0, r0, r6
 8000c96:	4298      	cmp	r0, r3
 8000c98:	d9f6      	bls.n	8000c88 <HAL_RCC_OscConfig+0x25c>
 8000c9a:	e728      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d10b      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x28c>
 8000ca0:	6a21      	ldr	r1, [r4, #32]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	6223      	str	r3, [r4, #32]
 8000ca8:	6a23      	ldr	r3, [r4, #32]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000cae:	f7ff fae1 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000cb4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb6:	e00d      	b.n	8000cd4 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb8:	6a23      	ldr	r3, [r4, #32]
 8000cba:	4393      	bics	r3, r2
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	6223      	str	r3, [r4, #32]
 8000cc0:	6a23      	ldr	r3, [r4, #32]
 8000cc2:	4393      	bics	r3, r2
 8000cc4:	e7c0      	b.n	8000c48 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc6:	f7ff fad5 	bl	8000274 <HAL_GetTick>
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_RCC_OscConfig+0x314>)
 8000ccc:	1b80      	subs	r0, r0, r6
 8000cce:	4298      	cmp	r0, r3
 8000cd0:	d900      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x2a8>
 8000cd2:	e70c      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd4:	6a23      	ldr	r3, [r4, #32]
 8000cd6:	423b      	tst	r3, r7
 8000cd8:	d0f5      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000cda:	9b00      	ldr	r3, [sp, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d000      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x2b6>
 8000ce0:	e6b6      	b.n	8000a50 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce2:	69e3      	ldr	r3, [r4, #28]
 8000ce4:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_RCC_OscConfig+0x318>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61e3      	str	r3, [r4, #28]
 8000cea:	e6b1      	b.n	8000a50 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cec:	f7ff fac2 	bl	8000274 <HAL_GetTick>
 8000cf0:	1bc0      	subs	r0, r0, r7
 8000cf2:	2802      	cmp	r0, #2
 8000cf4:	d800      	bhi.n	8000cf8 <HAL_RCC_OscConfig+0x2cc>
 8000cf6:	e6be      	b.n	8000a76 <HAL_RCC_OscConfig+0x4a>
 8000cf8:	e6f9      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000cfa:	3205      	adds	r2, #5
 8000cfc:	d103      	bne.n	8000d06 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000cfe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d00:	439a      	bics	r2, r3
 8000d02:	6362      	str	r2, [r4, #52]	; 0x34
 8000d04:	e6bb      	b.n	8000a7e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d06:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d08:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d0a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000d0c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d0e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000d10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d12:	4393      	bics	r3, r2
 8000d14:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d16:	f7ff faad 	bl	8000274 <HAL_GetTick>
 8000d1a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d1e:	4233      	tst	r3, r6
 8000d20:	d100      	bne.n	8000d24 <HAL_RCC_OscConfig+0x2f8>
 8000d22:	e6b3      	b.n	8000a8c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d24:	f7ff faa6 	bl	8000274 <HAL_GetTick>
 8000d28:	1bc0      	subs	r0, r0, r7
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9f6      	bls.n	8000d1c <HAL_RCC_OscConfig+0x2f0>
 8000d2e:	e6de      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
 8000d30:	40021000 	.word	0x40021000
 8000d34:	fffeffff 	.word	0xfffeffff
 8000d38:	fffbffff 	.word	0xfffbffff
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	00001388 	.word	0x00001388
 8000d44:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d48:	220c      	movs	r2, #12
 8000d4a:	4c26      	ldr	r4, [pc, #152]	; (8000de4 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d100      	bne.n	8000d58 <HAL_RCC_OscConfig+0x32c>
 8000d56:	e6b3      	b.n	8000ac0 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <HAL_RCC_OscConfig+0x3bc>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d60:	2902      	cmp	r1, #2
 8000d62:	d12f      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000d64:	f7ff fa86 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d68:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d6c:	04b6      	lsls	r6, r6, #18
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	4233      	tst	r3, r6
 8000d72:	d121      	bne.n	8000db8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d74:	220f      	movs	r2, #15
 8000d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d78:	4393      	bics	r3, r2
 8000d7a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d80:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d82:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d84:	6862      	ldr	r2, [r4, #4]
 8000d86:	430b      	orrs	r3, r1
 8000d88:	4918      	ldr	r1, [pc, #96]	; (8000dec <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d8a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	045b      	lsls	r3, r3, #17
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fa6a 	bl	8000274 <HAL_GetTick>
 8000da0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000da2:	04ad      	lsls	r5, r5, #18
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	422b      	tst	r3, r5
 8000da8:	d000      	beq.n	8000dac <HAL_RCC_OscConfig+0x380>
 8000daa:	e673      	b.n	8000a94 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fa62 	bl	8000274 <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f6      	bls.n	8000da4 <HAL_RCC_OscConfig+0x378>
 8000db6:	e69a      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fa5c 	bl	8000274 <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9d5      	bls.n	8000d6e <HAL_RCC_OscConfig+0x342>
 8000dc2:	e694      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fa56 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dcc:	04ad      	lsls	r5, r5, #18
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	422b      	tst	r3, r5
 8000dd2:	d100      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x3aa>
 8000dd4:	e65e      	b.n	8000a94 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd6:	f7ff fa4d 	bl	8000274 <HAL_GetTick>
 8000dda:	1b80      	subs	r0, r0, r6
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f6      	bls.n	8000dce <HAL_RCC_OscConfig+0x3a2>
 8000de0:	e685      	b.n	8000aee <HAL_RCC_OscConfig+0xc2>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000
 8000de8:	feffffff 	.word	0xfeffffff
 8000dec:	ffc2ffff 	.word	0xffc2ffff

08000df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000df0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000df2:	4c14      	ldr	r4, [pc, #80]	; (8000e44 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000df4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000df6:	2210      	movs	r2, #16
 8000df8:	0021      	movs	r1, r4
 8000dfa:	4668      	mov	r0, sp
 8000dfc:	f001 fa6a 	bl	80022d4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e00:	0021      	movs	r1, r4
 8000e02:	ad04      	add	r5, sp, #16
 8000e04:	2210      	movs	r2, #16
 8000e06:	3110      	adds	r1, #16
 8000e08:	0028      	movs	r0, r5
 8000e0a:	f001 fa63 	bl	80022d4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e0e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e10:	4e0d      	ldr	r6, [pc, #52]	; (8000e48 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e12:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e14:	401a      	ands	r2, r3
 8000e16:	2a08      	cmp	r2, #8
 8000e18:	d111      	bne.n	8000e3e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	466a      	mov	r2, sp
 8000e1e:	0c99      	lsrs	r1, r3, #18
 8000e20:	4001      	ands	r1, r0
 8000e22:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e24:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000e26:	4002      	ands	r2, r0
 8000e28:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e2a:	03db      	lsls	r3, r3, #15
 8000e2c:	d505      	bpl.n	8000e3a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000e30:	f7ff f96a 	bl	8000108 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000e34:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e36:	b008      	add	sp, #32
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_RCC_GetSysClockFreq+0x60>)
 8000e3c:	e7fa      	b.n	8000e34 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000e40:	e7f9      	b.n	8000e36 <HAL_RCC_GetSysClockFreq+0x46>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	08002b60 	.word	0x08002b60
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	007a1200 	.word	0x007a1200
 8000e50:	003d0900 	.word	0x003d0900

08000e54 <HAL_RCC_ClockConfig>:
{
 8000e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e56:	2201      	movs	r2, #1
 8000e58:	4c43      	ldr	r4, [pc, #268]	; (8000f68 <HAL_RCC_ClockConfig+0x114>)
{
 8000e5a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e5c:	6823      	ldr	r3, [r4, #0]
{
 8000e5e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e60:	4013      	ands	r3, r2
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d31c      	bcc.n	8000ea0 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e66:	6832      	ldr	r2, [r6, #0]
 8000e68:	0793      	lsls	r3, r2, #30
 8000e6a:	d423      	bmi.n	8000eb4 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e6c:	07d3      	lsls	r3, r2, #31
 8000e6e:	d429      	bmi.n	8000ec4 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e70:	2301      	movs	r3, #1
 8000e72:	6822      	ldr	r2, [r4, #0]
 8000e74:	401a      	ands	r2, r3
 8000e76:	4297      	cmp	r7, r2
 8000e78:	d367      	bcc.n	8000f4a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	4c3b      	ldr	r4, [pc, #236]	; (8000f6c <HAL_RCC_ClockConfig+0x118>)
 8000e7e:	075b      	lsls	r3, r3, #29
 8000e80:	d46a      	bmi.n	8000f58 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e82:	f7ff ffb5 	bl	8000df0 <HAL_RCC_GetSysClockFreq>
 8000e86:	6863      	ldr	r3, [r4, #4]
 8000e88:	4a39      	ldr	r2, [pc, #228]	; (8000f70 <HAL_RCC_ClockConfig+0x11c>)
 8000e8a:	061b      	lsls	r3, r3, #24
 8000e8c:	0f1b      	lsrs	r3, r3, #28
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	40d8      	lsrs	r0, r3
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_RCC_ClockConfig+0x120>)
 8000e94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff f9c2 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d0da      	beq.n	8000e66 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
}
 8000eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000eb4:	20f0      	movs	r0, #240	; 0xf0
 8000eb6:	492d      	ldr	r1, [pc, #180]	; (8000f6c <HAL_RCC_ClockConfig+0x118>)
 8000eb8:	684b      	ldr	r3, [r1, #4]
 8000eba:	4383      	bics	r3, r0
 8000ebc:	68b0      	ldr	r0, [r6, #8]
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	604b      	str	r3, [r1, #4]
 8000ec2:	e7d3      	b.n	8000e6c <HAL_RCC_ClockConfig+0x18>
 8000ec4:	4d29      	ldr	r5, [pc, #164]	; (8000f6c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eca:	2a01      	cmp	r2, #1
 8000ecc:	d11a      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	039b      	lsls	r3, r3, #14
 8000ed0:	d5ee      	bpl.n	8000eb0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	686b      	ldr	r3, [r5, #4]
 8000ed6:	438b      	bics	r3, r1
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000edc:	f7ff f9ca 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ee2:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d115      	bne.n	8000f14 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	220c      	movs	r2, #12
 8000eea:	686b      	ldr	r3, [r5, #4]
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d0be      	beq.n	8000e70 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef2:	f7ff f9bf 	bl	8000274 <HAL_GetTick>
 8000ef6:	9b01      	ldr	r3, [sp, #4]
 8000ef8:	1ac0      	subs	r0, r0, r3
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_RCC_ClockConfig+0x124>)
 8000efc:	4298      	cmp	r0, r3
 8000efe:	d9f3      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000f00:	2003      	movs	r0, #3
 8000f02:	e7d6      	b.n	8000eb2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f04:	2a02      	cmp	r2, #2
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	d4e2      	bmi.n	8000ed2 <HAL_RCC_ClockConfig+0x7e>
 8000f0c:	e7d0      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0e:	079b      	lsls	r3, r3, #30
 8000f10:	d4df      	bmi.n	8000ed2 <HAL_RCC_ClockConfig+0x7e>
 8000f12:	e7cd      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d012      	beq.n	8000f3e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f18:	220c      	movs	r2, #12
 8000f1a:	686b      	ldr	r3, [r5, #4]
 8000f1c:	4213      	tst	r3, r2
 8000f1e:	d0a7      	beq.n	8000e70 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f20:	f7ff f9a8 	bl	8000274 <HAL_GetTick>
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	1ac0      	subs	r0, r0, r3
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_RCC_ClockConfig+0x124>)
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d9f4      	bls.n	8000f18 <HAL_RCC_ClockConfig+0xc4>
 8000f2e:	e7e7      	b.n	8000f00 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f30:	f7ff f9a0 	bl	8000274 <HAL_GetTick>
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	1ac0      	subs	r0, r0, r3
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_RCC_ClockConfig+0x124>)
 8000f3a:	4298      	cmp	r0, r3
 8000f3c:	d8e0      	bhi.n	8000f00 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	686b      	ldr	r3, [r5, #4]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d1f3      	bne.n	8000f30 <HAL_RCC_ClockConfig+0xdc>
 8000f48:	e792      	b.n	8000e70 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	439a      	bics	r2, r3
 8000f4e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	421a      	tst	r2, r3
 8000f54:	d1ac      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x5c>
 8000f56:	e790      	b.n	8000e7a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_RCC_ClockConfig+0x128>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	68f2      	ldr	r2, [r6, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	6063      	str	r3, [r4, #4]
 8000f64:	e78d      	b.n	8000e82 <HAL_RCC_ClockConfig+0x2e>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	08003382 	.word	0x08003382
 8000f74:	20000008 	.word	0x20000008
 8000f78:	00001388 	.word	0x00001388
 8000f7c:	fffff8ff 	.word	0xfffff8ff

08000f80 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000f80:	4b01      	ldr	r3, [pc, #4]	; (8000f88 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f82:	6818      	ldr	r0, [r3, #0]
}
 8000f84:	4770      	bx	lr
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f8e:	6803      	ldr	r3, [r0, #0]
{
 8000f90:	b085      	sub	sp, #20
 8000f92:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f94:	03db      	lsls	r3, r3, #15
 8000f96:	d528      	bpl.n	8000fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f98:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9c:	4c37      	ldr	r4, [pc, #220]	; (800107c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000f9e:	0552      	lsls	r2, r2, #21
 8000fa0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa4:	4213      	tst	r3, r2
 8000fa6:	d108      	bne.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fa8:	69e3      	ldr	r3, [r4, #28]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61e3      	str	r3, [r4, #28]
 8000fae:	69e3      	ldr	r3, [r4, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	9303      	str	r3, [sp, #12]
 8000fb4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	2780      	movs	r7, #128	; 0x80
 8000fbc:	4e30      	ldr	r6, [pc, #192]	; (8001080 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000fbe:	007f      	lsls	r7, r7, #1
 8000fc0:	6833      	ldr	r3, [r6, #0]
 8000fc2:	423b      	tst	r3, r7
 8000fc4:	d026      	beq.n	8001014 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fc6:	22c0      	movs	r2, #192	; 0xc0
 8000fc8:	6a23      	ldr	r3, [r4, #32]
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	4e2d      	ldr	r6, [pc, #180]	; (8001084 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fd0:	d132      	bne.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000fd2:	6a23      	ldr	r3, [r4, #32]
 8000fd4:	401e      	ands	r6, r3
 8000fd6:	686b      	ldr	r3, [r5, #4]
 8000fd8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fda:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000fdc:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d103      	bne.n	8000fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe2:	69e3      	ldr	r3, [r4, #28]
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000fea:	682a      	ldr	r2, [r5, #0]
 8000fec:	07d3      	lsls	r3, r2, #31
 8000fee:	d506      	bpl.n	8000ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	4922      	ldr	r1, [pc, #136]	; (800107c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ff4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000ff6:	4383      	bics	r3, r0
 8000ff8:	68a8      	ldr	r0, [r5, #8]
 8000ffa:	4303      	orrs	r3, r0
 8000ffc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ffe:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001000:	0693      	lsls	r3, r2, #26
 8001002:	d517      	bpl.n	8001034 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001004:	2110      	movs	r1, #16
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001008:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800100a:	438b      	bics	r3, r1
 800100c:	68e9      	ldr	r1, [r5, #12]
 800100e:	430b      	orrs	r3, r1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	e00f      	b.n	8001034 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001014:	6833      	ldr	r3, [r6, #0]
 8001016:	433b      	orrs	r3, r7
 8001018:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800101a:	f7ff f92b 	bl	8000274 <HAL_GetTick>
 800101e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	6833      	ldr	r3, [r6, #0]
 8001022:	423b      	tst	r3, r7
 8001024:	d1cf      	bne.n	8000fc6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001026:	f7ff f925 	bl	8000274 <HAL_GetTick>
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	1ac0      	subs	r0, r0, r3
 800102e:	2864      	cmp	r0, #100	; 0x64
 8001030:	d9f6      	bls.n	8001020 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8001032:	2003      	movs	r0, #3
}
 8001034:	b005      	add	sp, #20
 8001036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001038:	6869      	ldr	r1, [r5, #4]
 800103a:	400a      	ands	r2, r1
 800103c:	4293      	cmp	r3, r2
 800103e:	d0c8      	beq.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001040:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001042:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001044:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001046:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4303      	orrs	r3, r0
 800104c:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800104e:	6a23      	ldr	r3, [r4, #32]
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001052:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001054:	4003      	ands	r3, r0
 8001056:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001058:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800105a:	07d3      	lsls	r3, r2, #31
 800105c:	d5b9      	bpl.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800105e:	f7ff f909 	bl	8000274 <HAL_GetTick>
 8001062:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	2202      	movs	r2, #2
 8001066:	6a23      	ldr	r3, [r4, #32]
 8001068:	4213      	tst	r3, r2
 800106a:	d1b2      	bne.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f7ff f902 	bl	8000274 <HAL_GetTick>
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001072:	1bc0      	subs	r0, r0, r7
 8001074:	4298      	cmp	r0, r3
 8001076:	d9f5      	bls.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001078:	e7db      	b.n	8001032 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40021000 	.word	0x40021000
 8001080:	40007000 	.word	0x40007000
 8001084:	fffffcff 	.word	0xfffffcff
 8001088:	efffffff 	.word	0xefffffff
 800108c:	fffeffff 	.word	0xfffeffff
 8001090:	00001388 	.word	0x00001388

08001094 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001094:	21a0      	movs	r1, #160	; 0xa0
 8001096:	6802      	ldr	r2, [r0, #0]
{
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800109a:	68d3      	ldr	r3, [r2, #12]
{
 800109c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800109e:	438b      	bics	r3, r1
 80010a0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80010a2:	f7ff f8e7 	bl	8000274 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80010a6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80010a8:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80010aa:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80010ac:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	422b      	tst	r3, r5
 80010b4:	d001      	beq.n	80010ba <HAL_RTC_WaitForSynchro+0x26>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 80010b6:	2000      	movs	r0, #0
}
 80010b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80010ba:	f7ff f8db 	bl	8000274 <HAL_GetTick>
 80010be:	1b80      	subs	r0, r0, r6
 80010c0:	42b8      	cmp	r0, r7
 80010c2:	d9f4      	bls.n	80010ae <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80010c4:	2003      	movs	r0, #3
 80010c6:	e7f7      	b.n	80010b8 <HAL_RTC_WaitForSynchro+0x24>

080010c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80010ca:	2440      	movs	r4, #64	; 0x40
 80010cc:	6803      	ldr	r3, [r0, #0]
{
 80010ce:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	4222      	tst	r2, r4
 80010d4:	d001      	beq.n	80010da <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80010d6:	2000      	movs	r0, #0
}
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80010da:	2201      	movs	r2, #1
 80010dc:	4252      	negs	r2, r2
 80010de:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80010e0:	f7ff f8c8 	bl	8000274 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80010e4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80010e6:	0006      	movs	r6, r0
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80010e8:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	4223      	tst	r3, r4
 80010f0:	d1f1      	bne.n	80010d6 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80010f2:	f7ff f8bf 	bl	8000274 <HAL_GetTick>
 80010f6:	1b80      	subs	r0, r0, r6
 80010f8:	42b8      	cmp	r0, r7
 80010fa:	d9f6      	bls.n	80010ea <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e7eb      	b.n	80010d8 <RTC_EnterInitMode+0x10>

08001100 <HAL_RTC_Init>:
{
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	0004      	movs	r4, r0
     return HAL_ERROR;
 8001104:	2501      	movs	r5, #1
  if(hrtc == NULL)
 8001106:	2800      	cmp	r0, #0
 8001108:	d018      	beq.n	800113c <HAL_RTC_Init+0x3c>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800110a:	7f43      	ldrb	r3, [r0, #29]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8001112:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001114:	f001 f846 	bl	80021a4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001118:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800111a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800111c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800111e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001120:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
 8001124:	3a77      	subs	r2, #119	; 0x77
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001128:	f7ff ffce 	bl	80010c8 <RTC_EnterInitMode>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	1e05      	subs	r5, r0, #0
 8001130:	d006      	beq.n	8001140 <HAL_RTC_Init+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001136:	2304      	movs	r3, #4
        return HAL_ERROR;
 8001138:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 800113a:	7763      	strb	r3, [r4, #29]
}
 800113c:	0028      	movs	r0, r5
 800113e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	4917      	ldr	r1, [pc, #92]	; (80011a0 <HAL_RTC_Init+0xa0>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001144:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001146:	400a      	ands	r2, r1
 8001148:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800114a:	6862      	ldr	r2, [r4, #4]
 800114c:	6899      	ldr	r1, [r3, #8]
 800114e:	4302      	orrs	r2, r0
 8001150:	6960      	ldr	r0, [r4, #20]
 8001152:	4302      	orrs	r2, r0
 8001154:	430a      	orrs	r2, r1
 8001156:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001158:	68e2      	ldr	r2, [r4, #12]
 800115a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800115c:	68a2      	ldr	r2, [r4, #8]
 800115e:	6919      	ldr	r1, [r3, #16]
 8001160:	0412      	lsls	r2, r2, #16
 8001162:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001164:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001166:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	438a      	bics	r2, r1
 800116c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	069b      	lsls	r3, r3, #26
 8001172:	d406      	bmi.n	8001182 <HAL_RTC_Init+0x82>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001174:	0020      	movs	r0, r4
 8001176:	f7ff ff8d 	bl	8001094 <HAL_RTC_WaitForSynchro>
 800117a:	2800      	cmp	r0, #0
 800117c:	d001      	beq.n	8001182 <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	e7d7      	b.n	8001132 <HAL_RTC_Init+0x32>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <HAL_RTC_Init+0xa4>)
 8001186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001188:	400a      	ands	r2, r1
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800118c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118e:	69a1      	ldr	r1, [r4, #24]
 8001190:	430a      	orrs	r2, r1
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001194:	22ff      	movs	r2, #255	; 0xff
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001198:	2301      	movs	r3, #1
 800119a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800119c:	e7ce      	b.n	800113c <HAL_RTC_Init+0x3c>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	ff8fffbf 	.word	0xff8fffbf
 80011a4:	fffbffff 	.word	0xfffbffff

080011a8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80011a8:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 80011aa:	2809      	cmp	r0, #9
 80011ac:	d803      	bhi.n	80011b6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4318      	orrs	r0, r3
 80011b2:	b2c0      	uxtb	r0, r0
}
 80011b4:	4770      	bx	lr
    Value -= 10U;
 80011b6:	380a      	subs	r0, #10
    bcdhigh++;
 80011b8:	3301      	adds	r3, #1
    Value -= 10U;
 80011ba:	b2c0      	uxtb	r0, r0
 80011bc:	e7f5      	b.n	80011aa <RTC_ByteToBcd2+0x2>
	...

080011c0 <HAL_RTC_SetTime>:
{
 80011c0:	2302      	movs	r3, #2
 80011c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80011c6:	7f01      	ldrb	r1, [r0, #28]
{
 80011c8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80011ca:	001f      	movs	r7, r3
 80011cc:	2901      	cmp	r1, #1
 80011ce:	d032      	beq.n	8001236 <HAL_RTC_SetTime+0x76>
 80011d0:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80011d2:	7743      	strb	r3, [r0, #29]
 80011d4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 80011d6:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	313f      	adds	r1, #63	; 0x3f
 80011dc:	7828      	ldrb	r0, [r5, #0]
 80011de:	786e      	ldrb	r6, [r5, #1]
 80011e0:	78af      	ldrb	r7, [r5, #2]
 80011e2:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d128      	bne.n	800123a <HAL_RTC_SetTime+0x7a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d100      	bne.n	80011ee <HAL_RTC_SetTime+0x2e>
      sTime->TimeFormat = 0x00U;
 80011ec:	70eb      	strb	r3, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80011ee:	f7ff ffdb 	bl	80011a8 <RTC_ByteToBcd2>
 80011f2:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80011f4:	0030      	movs	r0, r6
 80011f6:	f7ff ffd7 	bl	80011a8 <RTC_ByteToBcd2>
 80011fa:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80011fc:	0038      	movs	r0, r7
 80011fe:	f7ff ffd3 	bl	80011a8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001202:	78ef      	ldrb	r7, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001204:	9b01      	ldr	r3, [sp, #4]
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001206:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001208:	4307      	orrs	r7, r0
 800120a:	0418      	lsls	r0, r3, #16
 800120c:	4307      	orrs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800120e:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001210:	22ca      	movs	r2, #202	; 0xca
 8001212:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001214:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
 8001218:	3a77      	subs	r2, #119	; 0x77
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800121c:	f7ff ff54 	bl	80010c8 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001220:	433e      	orrs	r6, r7
 8001222:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001224:	1e07      	subs	r7, r0, #0
 8001226:	d012      	beq.n	800124e <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001228:	22ff      	movs	r2, #255	; 0xff
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800122c:	2304      	movs	r3, #4
 800122e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001230:	2300      	movs	r3, #0
 8001232:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001234:	2701      	movs	r7, #1
}
 8001236:	0038      	movs	r0, r7
 8001238:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00U;
 800123e:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001240:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001242:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001244:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001246:	4337      	orrs	r7, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001248:	78ee      	ldrb	r6, [r5, #3]
 800124a:	0436      	lsls	r6, r6, #16
 800124c:	e7e0      	b.n	8001210 <HAL_RTC_SetTime+0x50>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <HAL_RTC_SetTime+0xe0>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001250:	4914      	ldr	r1, [pc, #80]	; (80012a4 <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001252:	4006      	ands	r6, r0
 8001254:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001256:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001258:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800125a:	400a      	ands	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800125e:	68ea      	ldr	r2, [r5, #12]
 8001260:	6899      	ldr	r1, [r3, #8]
 8001262:	4302      	orrs	r2, r0
 8001264:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001266:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001268:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	438a      	bics	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	069b      	lsls	r3, r3, #26
 8001274:	d40b      	bmi.n	800128e <HAL_RTC_SetTime+0xce>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001276:	0020      	movs	r0, r4
 8001278:	f7ff ff0c 	bl	8001094 <HAL_RTC_WaitForSynchro>
 800127c:	2800      	cmp	r0, #0
 800127e:	d006      	beq.n	800128e <HAL_RTC_SetTime+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001286:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8001288:	7727      	strb	r7, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800128a:	7763      	strb	r3, [r4, #29]
 800128c:	e7d2      	b.n	8001234 <HAL_RTC_SetTime+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001294:	2301      	movs	r3, #1
 8001296:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8001298:	2300      	movs	r3, #0
 800129a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 800129c:	e7cb      	b.n	8001236 <HAL_RTC_SetTime+0x76>
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	007f7f7f 	.word	0x007f7f7f
 80012a4:	fffbffff 	.word	0xfffbffff

080012a8 <HAL_RTC_SetDate>:
{
 80012a8:	2302      	movs	r3, #2
 80012aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012ac:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 80012ae:	7f01      	ldrb	r1, [r0, #28]
{
 80012b0:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 80012b2:	001e      	movs	r6, r3
 80012b4:	2901      	cmp	r1, #1
 80012b6:	d031      	beq.n	800131c <HAL_RTC_SetDate+0x74>
 80012b8:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80012ba:	7743      	strb	r3, [r0, #29]
 __HAL_LOCK(hrtc);
 80012bc:	7701      	strb	r1, [r0, #28]
 80012be:	786b      	ldrb	r3, [r5, #1]
 80012c0:	78e8      	ldrb	r0, [r5, #3]
 80012c2:	78af      	ldrb	r7, [r5, #2]
 80012c4:	782e      	ldrb	r6, [r5, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d148      	bne.n	800135c <HAL_RTC_SetDate+0xb4>
 80012ca:	3210      	adds	r2, #16
 80012cc:	4213      	tst	r3, r2
 80012ce:	d002      	beq.n	80012d6 <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80012d0:	4393      	bics	r3, r2
 80012d2:	330a      	adds	r3, #10
 80012d4:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80012d6:	f7ff ff67 	bl	80011a8 <RTC_ByteToBcd2>
 80012da:	9001      	str	r0, [sp, #4]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80012dc:	7868      	ldrb	r0, [r5, #1]
 80012de:	f7ff ff63 	bl	80011a8 <RTC_ByteToBcd2>
 80012e2:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80012e4:	0038      	movs	r0, r7
 80012e6:	f7ff ff5f 	bl	80011a8 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80012ea:	9b01      	ldr	r3, [sp, #4]
                 ((uint32_t)sDate->WeekDay << 13U));   
 80012ec:	0376      	lsls	r6, r6, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80012ee:	4330      	orrs	r0, r6
 80012f0:	041e      	lsls	r6, r3, #16
 80012f2:	4306      	orrs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80012f4:	022d      	lsls	r5, r5, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80012f6:	4335      	orrs	r5, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012f8:	22ca      	movs	r2, #202	; 0xca
 80012fa:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80012fc:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001300:	3a77      	subs	r2, #119	; 0x77
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001304:	f7ff fee0 	bl	80010c8 <RTC_EnterInitMode>
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	1e06      	subs	r6, r0, #0
 800130c:	d008      	beq.n	8001320 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001312:	2304      	movs	r3, #4
 8001314:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001316:	2300      	movs	r3, #0
 8001318:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800131a:	2601      	movs	r6, #1
}
 800131c:	0030      	movs	r0, r6
 800131e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001320:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001322:	4f12      	ldr	r7, [pc, #72]	; (800136c <HAL_RTC_SetDate+0xc4>)
 8001324:	403d      	ands	r5, r7
 8001326:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	438a      	bics	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	069b      	lsls	r3, r3, #26
 8001332:	d40b      	bmi.n	800134c <HAL_RTC_SetDate+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001334:	0020      	movs	r0, r4
 8001336:	f7ff fead 	bl	8001094 <HAL_RTC_WaitForSynchro>
 800133a:	2800      	cmp	r0, #0
 800133c:	d006      	beq.n	800134c <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001344:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8001346:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001348:	7763      	strb	r3, [r4, #29]
 800134a:	e7e6      	b.n	800131a <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800134c:	22ff      	movs	r2, #255	; 0xff
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001352:	2301      	movs	r3, #1
 8001354:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001356:	2300      	movs	r3, #0
 8001358:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 800135a:	e7df      	b.n	800131c <HAL_RTC_SetDate+0x74>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800135c:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800135e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001360:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8001362:	431f      	orrs	r7, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8001364:	0375      	lsls	r5, r6, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001366:	433d      	orrs	r5, r7
 8001368:	e7c6      	b.n	80012f8 <HAL_RTC_SetDate+0x50>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	00ffff3f 	.word	0x00ffff3f

08001370 <HAL_RTC_SetAlarm>:
{
 8001370:	2302      	movs	r3, #2
 8001372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001374:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8001376:	7f01      	ldrb	r1, [r0, #28]
{
 8001378:	0005      	movs	r5, r0
 800137a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800137c:	0018      	movs	r0, r3
 800137e:	2901      	cmp	r1, #1
 8001380:	d073      	beq.n	800146a <HAL_RTC_SetAlarm+0xfa>
 8001382:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001384:	776b      	strb	r3, [r5, #29]
 8001386:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 8001388:	7729      	strb	r1, [r5, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	313f      	adds	r1, #63	; 0x3f
 800138e:	7820      	ldrb	r0, [r4, #0]
 8001390:	7866      	ldrb	r6, [r4, #1]
 8001392:	78a7      	ldrb	r7, [r4, #2]
 8001394:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8001396:	2a00      	cmp	r2, #0
 8001398:	d148      	bne.n	800142c <HAL_RTC_SetAlarm+0xbc>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800139a:	2b00      	cmp	r3, #0
 800139c:	d100      	bne.n	80013a0 <HAL_RTC_SetAlarm+0x30>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800139e:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80013a0:	f7ff ff02 	bl	80011a8 <RTC_ByteToBcd2>
 80013a4:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80013a6:	0030      	movs	r0, r6
 80013a8:	f7ff fefe 	bl	80011a8 <RTC_ByteToBcd2>
 80013ac:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80013ae:	0038      	movs	r0, r7
 80013b0:	f7ff fefa 	bl	80011a8 <RTC_ByteToBcd2>
 80013b4:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80013b6:	1c63      	adds	r3, r4, #1
 80013b8:	7fd8      	ldrb	r0, [r3, #31]
 80013ba:	f7ff fef5 	bl	80011a8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80013be:	6962      	ldr	r2, [r4, #20]
 80013c0:	69e3      	ldr	r3, [r4, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80013c2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80013c4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80013c6:	78e2      	ldrb	r2, [r4, #3]
 80013c8:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80013ca:	4313      	orrs	r3, r2
 80013cc:	431f      	orrs	r7, r3
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	431f      	orrs	r7, r3
 80013d4:	433e      	orrs	r6, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80013d6:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80013d8:	6863      	ldr	r3, [r4, #4]
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <HAL_RTC_SetAlarm+0x100>)
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	69a3      	ldr	r3, [r4, #24]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80013e0:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80013e2:	9302      	str	r3, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80013e4:	682b      	ldr	r3, [r5, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80013e6:	4306      	orrs	r6, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
 80013ea:	3a77      	subs	r2, #119	; 0x77
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80013ee:	689a      	ldr	r2, [r3, #8]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80013f0:	2701      	movs	r7, #1
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80013f2:	400a      	ands	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	491e      	ldr	r1, [pc, #120]	; (8001474 <HAL_RTC_SetAlarm+0x104>)
 80013fa:	400a      	ands	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 80013fe:	f7fe ff39 	bl	8000274 <HAL_GetTick>
 8001402:	9003      	str	r0, [sp, #12]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	68dc      	ldr	r4, [r3, #12]
 8001408:	403c      	ands	r4, r7
 800140a:	d020      	beq.n	800144e <HAL_RTC_SetAlarm+0xde>
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800140c:	9902      	ldr	r1, [sp, #8]
 800140e:	9a01      	ldr	r2, [sp, #4]
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001410:	61de      	str	r6, [r3, #28]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001412:	430a      	orrs	r2, r1
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	0052      	lsls	r2, r2, #1
 800141c:	430a      	orrs	r2, r1
 800141e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hrtc);
 8001420:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8001426:	776f      	strb	r7, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8001428:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 800142a:	e01e      	b.n	800146a <HAL_RTC_SetAlarm+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <HAL_RTC_SetAlarm+0xc2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001430:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001432:	69e3      	ldr	r3, [r4, #28]
 8001434:	6962      	ldr	r2, [r4, #20]
 8001436:	0400      	lsls	r0, r0, #16
 8001438:	4313      	orrs	r3, r2
 800143a:	431f      	orrs	r7, r3
 800143c:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800143e:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001440:	0236      	lsls	r6, r6, #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001442:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001444:	433e      	orrs	r6, r7
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001446:	1c63      	adds	r3, r4, #1
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001448:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800144a:	7fd8      	ldrb	r0, [r3, #31]
 800144c:	e7c3      	b.n	80013d6 <HAL_RTC_SetAlarm+0x66>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800144e:	f7fe ff11 	bl	8000274 <HAL_GetTick>
 8001452:	9b03      	ldr	r3, [sp, #12]
 8001454:	1ac0      	subs	r0, r0, r3
 8001456:	23fa      	movs	r3, #250	; 0xfa
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4298      	cmp	r0, r3
 800145c:	d9d2      	bls.n	8001404 <HAL_RTC_SetAlarm+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800145e:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001460:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001466:	7768      	strb	r0, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8001468:	772c      	strb	r4, [r5, #28]
}
 800146a:	b005      	add	sp, #20
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	fffffeff 	.word	0xfffffeff
 8001474:	ffffefff 	.word	0xffffefff

08001478 <HAL_RTC_SetAlarm_IT>:
{
 8001478:	2302      	movs	r3, #2
 800147a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147c:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 800147e:	7f01      	ldrb	r1, [r0, #28]
{
 8001480:	0005      	movs	r5, r0
 8001482:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8001484:	0018      	movs	r0, r3
 8001486:	2901      	cmp	r1, #1
 8001488:	d100      	bne.n	800148c <HAL_RTC_SetAlarm_IT+0x14>
 800148a:	e082      	b.n	8001592 <HAL_RTC_SetAlarm_IT+0x11a>
 800148c:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800148e:	776b      	strb	r3, [r5, #29]
 8001490:	682b      	ldr	r3, [r5, #0]
  __HAL_LOCK(hrtc);
 8001492:	7729      	strb	r1, [r5, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	313f      	adds	r1, #63	; 0x3f
 8001498:	7820      	ldrb	r0, [r4, #0]
 800149a:	7866      	ldrb	r6, [r4, #1]
 800149c:	78a7      	ldrb	r7, [r4, #2]
 800149e:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d157      	bne.n	8001554 <HAL_RTC_SetAlarm_IT+0xdc>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d100      	bne.n	80014aa <HAL_RTC_SetAlarm_IT+0x32>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80014a8:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80014aa:	f7ff fe7d 	bl	80011a8 <RTC_ByteToBcd2>
 80014ae:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80014b0:	0030      	movs	r0, r6
 80014b2:	f7ff fe79 	bl	80011a8 <RTC_ByteToBcd2>
 80014b6:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80014b8:	0038      	movs	r0, r7
 80014ba:	f7ff fe75 	bl	80011a8 <RTC_ByteToBcd2>
 80014be:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80014c0:	1c63      	adds	r3, r4, #1
 80014c2:	7fd8      	ldrb	r0, [r3, #31]
 80014c4:	f7ff fe70 	bl	80011a8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80014c8:	6962      	ldr	r2, [r4, #20]
 80014ca:	69e3      	ldr	r3, [r4, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80014cc:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80014ce:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80014d0:	78e2      	ldrb	r2, [r4, #3]
 80014d2:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80014d4:	4313      	orrs	r3, r2
 80014d6:	431f      	orrs	r7, r3
 80014d8:	9b01      	ldr	r3, [sp, #4]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	431f      	orrs	r7, r3
 80014de:	433e      	orrs	r6, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014e0:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80014e2:	6863      	ldr	r3, [r4, #4]
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80014e4:	492c      	ldr	r1, [pc, #176]	; (8001598 <HAL_RTC_SetAlarm_IT+0x120>)
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	69a3      	ldr	r3, [r4, #24]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80014ea:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80014ec:	9302      	str	r3, [sp, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014ee:	682b      	ldr	r3, [r5, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80014f0:	4306      	orrs	r6, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
 80014f4:	3a77      	subs	r2, #119	; 0x77
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80014f8:	689a      	ldr	r2, [r3, #8]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80014fa:	2701      	movs	r7, #1
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 80014fc:	400a      	ands	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001500:	68d9      	ldr	r1, [r3, #12]
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <HAL_RTC_SetAlarm_IT+0x124>)
 8001504:	b2c9      	uxtb	r1, r1
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800150a:	f7fe feb3 	bl	8000274 <HAL_GetTick>
 800150e:	9003      	str	r0, [sp, #12]
  while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	68dc      	ldr	r4, [r3, #12]
 8001514:	403c      	ands	r4, r7
 8001516:	d02e      	beq.n	8001576 <HAL_RTC_SetAlarm_IT+0xfe>
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001518:	9902      	ldr	r1, [sp, #8]
 800151a:	9a01      	ldr	r2, [sp, #4]
  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800151c:	61de      	str	r6, [r3, #28]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800151e:	430a      	orrs	r2, r1
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	6899      	ldr	r1, [r3, #8]
 8001526:	0052      	lsls	r2, r2, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	6899      	ldr	r1, [r3, #8]
 8001530:	0152      	lsls	r2, r2, #5
 8001532:	430a      	orrs	r2, r1
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001534:	2180      	movs	r1, #128	; 0x80
  __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001536:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_RTC_SetAlarm_IT+0x128>)
 800153a:	0289      	lsls	r1, r1, #10
 800153c:	6810      	ldr	r0, [r2, #0]
 800153e:	4308      	orrs	r0, r1
 8001540:	6010      	str	r0, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001542:	6890      	ldr	r0, [r2, #8]
 8001544:	4301      	orrs	r1, r0
 8001546:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(hrtc);  
 8001548:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 800154e:	776f      	strb	r7, [r5, #29]
  __HAL_UNLOCK(hrtc);  
 8001550:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 8001552:	e01e      	b.n	8001592 <HAL_RTC_SetAlarm_IT+0x11a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <HAL_RTC_SetAlarm_IT+0xe2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001558:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800155a:	69e3      	ldr	r3, [r4, #28]
 800155c:	6962      	ldr	r2, [r4, #20]
 800155e:	0400      	lsls	r0, r0, #16
 8001560:	4313      	orrs	r3, r2
 8001562:	431f      	orrs	r7, r3
 8001564:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001566:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001568:	0236      	lsls	r6, r6, #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800156a:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800156c:	433e      	orrs	r6, r7
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800156e:	1c63      	adds	r3, r4, #1
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001570:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001572:	7fd8      	ldrb	r0, [r3, #31]
 8001574:	e7b4      	b.n	80014e0 <HAL_RTC_SetAlarm_IT+0x68>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001576:	f7fe fe7d 	bl	8000274 <HAL_GetTick>
 800157a:	9b03      	ldr	r3, [sp, #12]
 800157c:	1ac0      	subs	r0, r0, r3
 800157e:	23fa      	movs	r3, #250	; 0xfa
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4298      	cmp	r0, r3
 8001584:	d9c4      	bls.n	8001510 <HAL_RTC_SetAlarm_IT+0x98>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001586:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001588:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 800158e:	7768      	strb	r0, [r5, #29]
      __HAL_UNLOCK(hrtc);
 8001590:	772c      	strb	r4, [r5, #28]
}
 8001592:	b005      	add	sp, #20
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	fffffeff 	.word	0xfffffeff
 800159c:	fffffe7f 	.word	0xfffffe7f
 80015a0:	40010400 	.word	0x40010400

080015a4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80015a4:	230a      	movs	r3, #10
 80015a6:	0902      	lsrs	r2, r0, #4
 80015a8:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 80015aa:	220f      	movs	r2, #15
 80015ac:	4010      	ands	r0, r2
 80015ae:	1818      	adds	r0, r3, r0
 80015b0:	b2c0      	uxtb	r0, r0
}
 80015b2:	4770      	bx	lr

080015b4 <HAL_RTC_GetTime>:
{
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80015b8:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80015ba:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80015bc:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80015be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80015c0:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80015c2:	690b      	ldr	r3, [r1, #16]
 80015c4:	045b      	lsls	r3, r3, #17
 80015c6:	0c5b      	lsrs	r3, r3, #17
 80015c8:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80015ca:	680b      	ldr	r3, [r1, #0]
 80015cc:	490d      	ldr	r1, [pc, #52]	; (8001604 <HAL_RTC_GetTime+0x50>)
 80015ce:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80015d0:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80015d2:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80015d4:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80015d6:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80015d8:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80015da:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80015dc:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80015de:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80015e0:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80015e2:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 80015e4:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d10a      	bne.n	8001600 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80015ea:	f7ff ffdb 	bl	80015a4 <RTC_Bcd2ToByte>
 80015ee:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80015f0:	0030      	movs	r0, r6
 80015f2:	f7ff ffd7 	bl	80015a4 <RTC_Bcd2ToByte>
 80015f6:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80015f8:	0028      	movs	r0, r5
 80015fa:	f7ff ffd3 	bl	80015a4 <RTC_Bcd2ToByte>
 80015fe:	70a0      	strb	r0, [r4, #2]
}
 8001600:	2000      	movs	r0, #0
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	007f7f7f 	.word	0x007f7f7f

08001608 <HAL_RTC_GetDate>:
{
 8001608:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800160a:	253f      	movs	r5, #63	; 0x3f
{
 800160c:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800160e:	6803      	ldr	r3, [r0, #0]
 8001610:	490d      	ldr	r1, [pc, #52]	; (8001648 <HAL_RTC_GetDate+0x40>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001616:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001618:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800161a:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800161c:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800161e:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001620:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001622:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001624:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001626:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001628:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800162a:	2a00      	cmp	r2, #0
 800162c:	d10a      	bne.n	8001644 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800162e:	f7ff ffb9 	bl	80015a4 <RTC_Bcd2ToByte>
 8001632:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001634:	0030      	movs	r0, r6
 8001636:	f7ff ffb5 	bl	80015a4 <RTC_Bcd2ToByte>
 800163a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 800163c:	0028      	movs	r0, r5
 800163e:	f7ff ffb1 	bl	80015a4 <RTC_Bcd2ToByte>
 8001642:	70a0      	strb	r0, [r4, #2]
}
 8001644:	2000      	movs	r0, #0
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	00ffff3f 	.word	0x00ffff3f

0800164c <set_time>:
{
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	/**Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 12;
 800164c:	230c      	movs	r3, #12
	sTime.Minutes = 05;
	sTime.Seconds = 00;
 800164e:	2200      	movs	r2, #0
{
 8001650:	b510      	push	{r4, lr}
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001652:	4c10      	ldr	r4, [pc, #64]	; (8001694 <set_time+0x48>)
{
 8001654:	b086      	sub	sp, #24
	sTime.Hours = 12;
 8001656:	a901      	add	r1, sp, #4
 8001658:	700b      	strb	r3, [r1, #0]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800165a:	0020      	movs	r0, r4
	sTime.Minutes = 05;
 800165c:	3b07      	subs	r3, #7
	sTime.Seconds = 00;
 800165e:	708a      	strb	r2, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001660:	60ca      	str	r2, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001662:	610a      	str	r2, [r1, #16]
	sTime.Minutes = 05;
 8001664:	704b      	strb	r3, [r1, #1]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001666:	f7ff fdab 	bl	80011c0 <HAL_RTC_SetTime>
 800166a:	1e02      	subs	r2, r0, #0
 800166c:	d000      	beq.n	8001670 <set_time+0x24>
 800166e:	e7fe      	b.n	800166e <set_time+0x22>
	}
	/* USER CODE BEGIN RTC_Init 3 */

	/* USER CODE END RTC_Init 3 */

	sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001670:	4669      	mov	r1, sp
 8001672:	2306      	movs	r3, #6
 8001674:	700b      	strb	r3, [r1, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 8001676:	330b      	adds	r3, #11
 8001678:	704b      	strb	r3, [r1, #1]
	sDate.Date = 24;
 800167a:	3307      	adds	r3, #7
 800167c:	708b      	strb	r3, [r1, #2]
	sDate.Year = 18;

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800167e:	0020      	movs	r0, r4
	sDate.Year = 18;
 8001680:	3b06      	subs	r3, #6
 8001682:	70cb      	strb	r3, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001684:	f7ff fe10 	bl	80012a8 <HAL_RTC_SetDate>
 8001688:	2800      	cmp	r0, #0
 800168a:	d000      	beq.n	800168e <set_time+0x42>
 800168c:	e7fe      	b.n	800168c <set_time+0x40>
	/* USER CODE BEGIN RTC_Init 4 */



	/* USER CODE END RTC_Init 4 */
}
 800168e:	b006      	add	sp, #24
 8001690:	bd10      	pop	{r4, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	20000514 	.word	0x20000514

08001698 <set_alarm>:

void set_alarm (void)
{
 8001698:	b500      	push	{lr}
 800169a:	b08b      	sub	sp, #44	; 0x2c
	RTC_AlarmTypeDef sAlarm;

	/**Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 12;
 800169c:	466a      	mov	r2, sp
 800169e:	230c      	movs	r3, #12
 80016a0:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = 06;
 80016a2:	3b06      	subs	r3, #6
 80016a4:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = 00;
 80016a6:	4669      	mov	r1, sp
 80016a8:	2200      	movs	r2, #0
 80016aa:	708a      	strb	r2, [r1, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	9105      	str	r1, [sp, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	05c9      	lsls	r1, r1, #23
 80016b4:	9107      	str	r1, [sp, #28]
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_SATURDAY;
 80016b6:	4669      	mov	r1, sp
 80016b8:	3101      	adds	r1, #1
 80016ba:	77cb      	strb	r3, [r1, #31]
	sAlarm.Alarm = RTC_ALARM_A;
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <set_alarm+0x44>)
	sAlarm.Alarm = RTC_ALARM_A;
 80016be:	33fa      	adds	r3, #250	; 0xfa
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80016c0:	4669      	mov	r1, sp
	sAlarm.AlarmTime.SubSeconds = 0;
 80016c2:	9201      	str	r2, [sp, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016c4:	9203      	str	r2, [sp, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016c6:	9204      	str	r2, [sp, #16]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016c8:	9206      	str	r2, [sp, #24]
	sAlarm.Alarm = RTC_ALARM_A;
 80016ca:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80016cc:	f7ff fed4 	bl	8001478 <HAL_RTC_SetAlarm_IT>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d000      	beq.n	80016d6 <set_alarm+0x3e>
 80016d4:	e7fe      	b.n	80016d4 <set_alarm+0x3c>
		_Error_Handler(__FILE__, __LINE__);
	}
	/* USER CODE BEGIN RTC_Init 5 */

	/* USER CODE END RTC_Init 5 */
}
 80016d6:	b00b      	add	sp, #44	; 0x2c
 80016d8:	bd00      	pop	{pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000514 	.word	0x20000514

080016e0 <get_time>:

void get_time(void)
{
 80016e0:	b570      	push	{r4, r5, r6, lr}
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80016e2:	4e13      	ldr	r6, [pc, #76]	; (8001730 <get_time+0x50>)
{
 80016e4:	b088      	sub	sp, #32
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80016e6:	ad03      	add	r5, sp, #12
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80016e8:	ac02      	add	r4, sp, #8
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80016ea:	0029      	movs	r1, r5
 80016ec:	2200      	movs	r2, #0
 80016ee:	0030      	movs	r0, r6
 80016f0:	f7ff ff60 	bl	80015b4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80016f4:	0021      	movs	r1, r4
 80016f6:	2200      	movs	r2, #0
 80016f8:	0030      	movs	r0, r6
 80016fa:	f7ff ff85 	bl	8001608 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80016fe:	78a9      	ldrb	r1, [r5, #2]
 8001700:	786b      	ldrb	r3, [r5, #1]
 8001702:	782a      	ldrb	r2, [r5, #0]
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <get_time+0x54>)
 8001706:	9100      	str	r1, [sp, #0]
 8001708:	490b      	ldr	r1, [pc, #44]	; (8001738 <get_time+0x58>)
 800170a:	f000 fdf5 	bl	80022f8 <siprintf>

	/* Display date Format: mm-dd-yy */
	sprintf((char*)date,"%02d/%02d/%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 800170e:	20fa      	movs	r0, #250	; 0xfa
 8001710:	78e1      	ldrb	r1, [r4, #3]
 8001712:	00c0      	lsls	r0, r0, #3
 8001714:	1809      	adds	r1, r1, r0
 8001716:	7863      	ldrb	r3, [r4, #1]
 8001718:	78a2      	ldrb	r2, [r4, #2]
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <get_time+0x5c>)
 800171c:	9100      	str	r1, [sp, #0]
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <get_time+0x60>)
 8001720:	f000 fdea 	bl	80022f8 <siprintf>
	dayweek = gDate.WeekDay;
 8001724:	7822      	ldrb	r2, [r4, #0]
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <get_time+0x64>)
 8001728:	701a      	strb	r2, [r3, #0]
}
 800172a:	b008      	add	sp, #32
 800172c:	bd70      	pop	{r4, r5, r6, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	20000514 	.word	0x20000514
 8001734:	20000534 	.word	0x20000534
 8001738:	0800335e 	.word	0x0800335e
 800173c:	2000053e 	.word	0x2000053e
 8001740:	0800336d 	.word	0x0800336d
 8001744:	2000008d 	.word	0x2000008d

08001748 <display_time>:


//Let's display the time and date on lcd

void display_time (void)
{
 8001748:	b510      	push	{r4, lr}
	SSD1306_GotoXY(0,10);
 800174a:	210a      	movs	r1, #10
 800174c:	2000      	movs	r0, #0
 800174e:	f000 fb7b 	bl	8001e48 <SSD1306_GotoXY>
	SSD1306_Puts(time,&Font_7x10,1);
 8001752:	4c22      	ldr	r4, [pc, #136]	; (80017dc <display_time+0x94>)
 8001754:	2201      	movs	r2, #1
 8001756:	0021      	movs	r1, r4
 8001758:	4821      	ldr	r0, [pc, #132]	; (80017e0 <display_time+0x98>)
 800175a:	f000 fbc7 	bl	8001eec <SSD1306_Puts>
	SSD1306_GotoXY(0,20);
 800175e:	2114      	movs	r1, #20
 8001760:	2000      	movs	r0, #0
 8001762:	f000 fb71 	bl	8001e48 <SSD1306_GotoXY>
	SSD1306_Puts(date,&Font_7x10,1);
 8001766:	2201      	movs	r2, #1
 8001768:	0021      	movs	r1, r4
 800176a:	481e      	ldr	r0, [pc, #120]	; (80017e4 <display_time+0x9c>)
 800176c:	f000 fbbe 	bl	8001eec <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001770:	f000 fbfe 	bl	8001f70 <SSD1306_UpdateScreen>
	SSD1306_GotoXY(0,30);
 8001774:	211e      	movs	r1, #30
 8001776:	2000      	movs	r0, #0
 8001778:	f000 fb66 	bl	8001e48 <SSD1306_GotoXY>
	if(dayweek ==1){
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <display_time+0xa0>)
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	2a01      	cmp	r2, #1
 8001782:	d106      	bne.n	8001792 <display_time+0x4a>

		SSD1306_Puts("Monday", &Font_7x10,1);
 8001784:	0021      	movs	r1, r4
 8001786:	4819      	ldr	r0, [pc, #100]	; (80017ec <display_time+0xa4>)
	else if(dayweek ==6){
		SSD1306_Puts("Saturday", &Font_7x10,1);
	}

	else if(dayweek ==7){
		SSD1306_Puts("Sunday", &Font_7x10,1);
 8001788:	f000 fbb0 	bl	8001eec <SSD1306_Puts>
	}

	SSD1306_UpdateScreen();
 800178c:	f000 fbf0 	bl	8001f70 <SSD1306_UpdateScreen>
}
 8001790:	bd10      	pop	{r4, pc}
	else if(dayweek ==2){
 8001792:	2a02      	cmp	r2, #2
 8001794:	d103      	bne.n	800179e <display_time+0x56>
		SSD1306_Puts("Tuesday", &Font_7x10,1);
 8001796:	3a01      	subs	r2, #1
 8001798:	0021      	movs	r1, r4
 800179a:	4815      	ldr	r0, [pc, #84]	; (80017f0 <display_time+0xa8>)
 800179c:	e7f4      	b.n	8001788 <display_time+0x40>
	else if(dayweek ==3){
 800179e:	2a03      	cmp	r2, #3
 80017a0:	d103      	bne.n	80017aa <display_time+0x62>
		SSD1306_Puts("Wednesday", &Font_7x10,1);
 80017a2:	3a02      	subs	r2, #2
 80017a4:	0021      	movs	r1, r4
 80017a6:	4813      	ldr	r0, [pc, #76]	; (80017f4 <display_time+0xac>)
 80017a8:	e7ee      	b.n	8001788 <display_time+0x40>
	else if(dayweek ==4){
 80017aa:	2a04      	cmp	r2, #4
 80017ac:	d103      	bne.n	80017b6 <display_time+0x6e>
		SSD1306_Puts("Thursday", &Font_7x10,1);
 80017ae:	3a03      	subs	r2, #3
 80017b0:	0021      	movs	r1, r4
 80017b2:	4811      	ldr	r0, [pc, #68]	; (80017f8 <display_time+0xb0>)
 80017b4:	e7e8      	b.n	8001788 <display_time+0x40>
	else if(dayweek ==5){
 80017b6:	2a05      	cmp	r2, #5
 80017b8:	d103      	bne.n	80017c2 <display_time+0x7a>
		SSD1306_Puts("Friday", &Font_7x10,1);
 80017ba:	3a04      	subs	r2, #4
 80017bc:	0021      	movs	r1, r4
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <display_time+0xb4>)
 80017c0:	e7e2      	b.n	8001788 <display_time+0x40>
	else if(dayweek ==6){
 80017c2:	2a06      	cmp	r2, #6
 80017c4:	d103      	bne.n	80017ce <display_time+0x86>
		SSD1306_Puts("Saturday", &Font_7x10,1);
 80017c6:	3a05      	subs	r2, #5
 80017c8:	0021      	movs	r1, r4
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <display_time+0xb8>)
 80017cc:	e7dc      	b.n	8001788 <display_time+0x40>
	else if(dayweek ==7){
 80017ce:	2a07      	cmp	r2, #7
 80017d0:	d1dc      	bne.n	800178c <display_time+0x44>
		SSD1306_Puts("Sunday", &Font_7x10,1);
 80017d2:	3a06      	subs	r2, #6
 80017d4:	0021      	movs	r1, r4
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <display_time+0xbc>)
 80017d8:	e7d6      	b.n	8001788 <display_time+0x40>
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000534 	.word	0x20000534
 80017e4:	2000053e 	.word	0x2000053e
 80017e8:	2000008d 	.word	0x2000008d
 80017ec:	080032ec 	.word	0x080032ec
 80017f0:	080032f3 	.word	0x080032f3
 80017f4:	080032fb 	.word	0x080032fb
 80017f8:	08003305 	.word	0x08003305
 80017fc:	0800330e 	.word	0x0800330e
 8001800:	08003315 	.word	0x08003315
 8001804:	0800331e 	.word	0x0800331e

08001808 <display_hour>:

void display_hour (void)
{
 8001808:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 800180a:	2119      	movs	r1, #25
 800180c:	2000      	movs	r0, #0
 800180e:	f000 fb1b 	bl	8001e48 <SSD1306_GotoXY>
	SSD1306_Puts(time,&Font_7x10,1);
 8001812:	2201      	movs	r2, #1
 8001814:	4903      	ldr	r1, [pc, #12]	; (8001824 <display_hour+0x1c>)
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <display_hour+0x20>)
 8001818:	f000 fb68 	bl	8001eec <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800181c:	f000 fba8 	bl	8001f70 <SSD1306_UpdateScreen>
}
 8001820:	bd10      	pop	{r4, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	20000000 	.word	0x20000000
 8001828:	20000534 	.word	0x20000534

0800182c <display_date>:

void display_date (void)
{
 800182c:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 800182e:	2119      	movs	r1, #25
 8001830:	2000      	movs	r0, #0
 8001832:	f000 fb09 	bl	8001e48 <SSD1306_GotoXY>
	SSD1306_Puts(date,&Font_7x10,1);
 8001836:	2201      	movs	r2, #1
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <display_date+0x1c>)
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <display_date+0x20>)
 800183c:	f000 fb56 	bl	8001eec <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001840:	f000 fb96 	bl	8001f70 <SSD1306_UpdateScreen>
}
 8001844:	bd10      	pop	{r4, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	20000000 	.word	0x20000000
 800184c:	2000053e 	.word	0x2000053e

08001850 <display_week>:
void display_week (void)
{
 8001850:	b510      	push	{r4, lr}

	SSD1306_GotoXY(0,25);
 8001852:	2119      	movs	r1, #25
 8001854:	2000      	movs	r0, #0
 8001856:	f000 faf7 	bl	8001e48 <SSD1306_GotoXY>
	if(dayweek ==1){
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <display_week+0x68>)
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	2a01      	cmp	r2, #1
 8001860:	d106      	bne.n	8001870 <display_week+0x20>

		SSD1306_Puts("monday", &Font_7x10,1);
 8001862:	4916      	ldr	r1, [pc, #88]	; (80018bc <display_week+0x6c>)
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <display_week+0x70>)
	else if(dayweek ==6){
		SSD1306_Puts("saturday", &Font_7x10,1);
	}

	else if(dayweek ==7){
		SSD1306_Puts("sunday", &Font_7x10,1);
 8001866:	f000 fb41 	bl	8001eec <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 800186a:	f000 fb81 	bl	8001f70 <SSD1306_UpdateScreen>
}
 800186e:	bd10      	pop	{r4, pc}
	else if(dayweek ==2){
 8001870:	2a02      	cmp	r2, #2
 8001872:	d103      	bne.n	800187c <display_week+0x2c>
		SSD1306_Puts("tuesday", &Font_7x10,1);
 8001874:	3a01      	subs	r2, #1
 8001876:	4911      	ldr	r1, [pc, #68]	; (80018bc <display_week+0x6c>)
 8001878:	4812      	ldr	r0, [pc, #72]	; (80018c4 <display_week+0x74>)
 800187a:	e7f4      	b.n	8001866 <display_week+0x16>
	else if(dayweek ==3){
 800187c:	2a03      	cmp	r2, #3
 800187e:	d103      	bne.n	8001888 <display_week+0x38>
		SSD1306_Puts("wednesday", &Font_7x10,1);
 8001880:	3a02      	subs	r2, #2
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <display_week+0x6c>)
 8001884:	4810      	ldr	r0, [pc, #64]	; (80018c8 <display_week+0x78>)
 8001886:	e7ee      	b.n	8001866 <display_week+0x16>
	else if(dayweek ==4){
 8001888:	2a04      	cmp	r2, #4
 800188a:	d103      	bne.n	8001894 <display_week+0x44>
		SSD1306_Puts("thursday", &Font_7x10,1);
 800188c:	3a03      	subs	r2, #3
 800188e:	490b      	ldr	r1, [pc, #44]	; (80018bc <display_week+0x6c>)
 8001890:	480e      	ldr	r0, [pc, #56]	; (80018cc <display_week+0x7c>)
 8001892:	e7e8      	b.n	8001866 <display_week+0x16>
	else if(dayweek ==5){
 8001894:	2a05      	cmp	r2, #5
 8001896:	d103      	bne.n	80018a0 <display_week+0x50>
		SSD1306_Puts("friday", &Font_7x10,1);
 8001898:	3a04      	subs	r2, #4
 800189a:	4908      	ldr	r1, [pc, #32]	; (80018bc <display_week+0x6c>)
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <display_week+0x80>)
 800189e:	e7e2      	b.n	8001866 <display_week+0x16>
	else if(dayweek ==6){
 80018a0:	2a06      	cmp	r2, #6
 80018a2:	d103      	bne.n	80018ac <display_week+0x5c>
		SSD1306_Puts("saturday", &Font_7x10,1);
 80018a4:	3a05      	subs	r2, #5
 80018a6:	4905      	ldr	r1, [pc, #20]	; (80018bc <display_week+0x6c>)
 80018a8:	480a      	ldr	r0, [pc, #40]	; (80018d4 <display_week+0x84>)
 80018aa:	e7dc      	b.n	8001866 <display_week+0x16>
	else if(dayweek ==7){
 80018ac:	2a07      	cmp	r2, #7
 80018ae:	d1dc      	bne.n	800186a <display_week+0x1a>
		SSD1306_Puts("sunday", &Font_7x10,1);
 80018b0:	3a06      	subs	r2, #6
 80018b2:	4902      	ldr	r1, [pc, #8]	; (80018bc <display_week+0x6c>)
 80018b4:	4808      	ldr	r0, [pc, #32]	; (80018d8 <display_week+0x88>)
 80018b6:	e7d6      	b.n	8001866 <display_week+0x16>
 80018b8:	2000008d 	.word	0x2000008d
 80018bc:	20000000 	.word	0x20000000
 80018c0:	08003325 	.word	0x08003325
 80018c4:	0800332c 	.word	0x0800332c
 80018c8:	08003334 	.word	0x08003334
 80018cc:	0800333e 	.word	0x0800333e
 80018d0:	08003347 	.word	0x08003347
 80018d4:	0800334e 	.word	0x0800334e
 80018d8:	08003357 	.word	0x08003357

080018dc <to_do_on_alarm>:
	alarm = 1;
}

void to_do_on_alarm (void)
{
	SSD1306_GotoXY(0,0);
 80018dc:	2100      	movs	r1, #0
{
 80018de:	b510      	push	{r4, lr}
	SSD1306_GotoXY(0,0);
 80018e0:	0008      	movs	r0, r1
 80018e2:	f000 fab1 	bl	8001e48 <SSD1306_GotoXY>
	SSD1306_Puts("alarme",&Font_7x10,1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	490a      	ldr	r1, [pc, #40]	; (8001914 <to_do_on_alarm+0x38>)
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <to_do_on_alarm+0x3c>)
 80018ec:	f000 fafe 	bl	8001eec <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80018f0:	f000 fb3e 	bl	8001f70 <SSD1306_UpdateScreen>
	HAL_Delay (3000);
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <to_do_on_alarm+0x40>)
 80018f6:	f7fe fcc3 	bl	8000280 <HAL_Delay>
	SSD1306_Fill(0);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 fa72 	bl	8001de4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001900:	f000 fb36 	bl	8001f70 <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001904:	2090      	movs	r0, #144	; 0x90
 8001906:	2201      	movs	r2, #1
 8001908:	2110      	movs	r1, #16
 800190a:	05c0      	lsls	r0, r0, #23
 800190c:	f7fe fddc 	bl	80004c8 <HAL_GPIO_WritePin>
}
 8001910:	bd10      	pop	{r4, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	20000000 	.word	0x20000000
 8001918:	0800337b 	.word	0x0800337b
 800191c:	00000bb8 	.word	0x00000bb8

08001920 <SystemClock_Config>:
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001920:	230a      	movs	r3, #10
{
 8001922:	b530      	push	{r4, r5, lr}
 8001924:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001926:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001928:	22a0      	movs	r2, #160	; 0xa0
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800192a:	3306      	adds	r3, #6
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800192e:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001932:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001934:	0392      	lsls	r2, r2, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001936:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001938:	940b      	str	r4, [sp, #44]	; 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800193a:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800193e:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001940:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001942:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001944:	f7ff f872 	bl	8000a2c <HAL_RCC_OscConfig>
 8001948:	2800      	cmp	r0, #0
 800194a:	d000      	beq.n	800194e <SystemClock_Config+0x2e>
 800194c:	e7fe      	b.n	800194c <SystemClock_Config+0x2c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194e:	2307      	movs	r3, #7
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001950:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001952:	9003      	str	r0, [sp, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001954:	0021      	movs	r1, r4
 8001956:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001958:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195a:	9501      	str	r5, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800195c:	f7ff fa7a 	bl	8000e54 <HAL_RCC_ClockConfig>
 8001960:	2800      	cmp	r0, #0
 8001962:	d000      	beq.n	8001966 <SystemClock_Config+0x46>
 8001964:	e7fe      	b.n	8001964 <SystemClock_Config+0x44>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <SystemClock_Config+0x84>)
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001968:	9007      	str	r0, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 800196a:	9304      	str	r3, [sp, #16]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800196c:	2380      	movs	r3, #128	; 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196e:	a804      	add	r0, sp, #16
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	9305      	str	r3, [sp, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001974:	f7ff fb0a 	bl	8000f8c <HAL_RCCEx_PeriphCLKConfig>
 8001978:	1e04      	subs	r4, r0, #0
 800197a:	d000      	beq.n	800197e <SystemClock_Config+0x5e>
 800197c:	e7fe      	b.n	800197c <SystemClock_Config+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800197e:	f7ff faff 	bl	8000f80 <HAL_RCC_GetHCLKFreq>
 8001982:	21fa      	movs	r1, #250	; 0xfa
 8001984:	0089      	lsls	r1, r1, #2
 8001986:	f7fe fbbf 	bl	8000108 <__udivsi3>
 800198a:	f7fe fcb9 	bl	8000300 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800198e:	2004      	movs	r0, #4
 8001990:	f7fe fcd0 	bl	8000334 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001994:	2001      	movs	r0, #1
 8001996:	0022      	movs	r2, r4
 8001998:	0021      	movs	r1, r4
 800199a:	4240      	negs	r0, r0
 800199c:	f7fe fc80 	bl	80002a0 <HAL_NVIC_SetPriority>
}
 80019a0:	b015      	add	sp, #84	; 0x54
 80019a2:	bd30      	pop	{r4, r5, pc}
 80019a4:	00010020 	.word	0x00010020

080019a8 <main>:
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b093      	sub	sp, #76	; 0x4c
	HAL_Init();
 80019ac:	f7fe fc4a 	bl	8000244 <HAL_Init>
	SystemClock_Config();
 80019b0:	f7ff ffb6 	bl	8001920 <SystemClock_Config>
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	2080      	movs	r0, #128	; 0x80
 80019b6:	4ad6      	ldr	r2, [pc, #856]	; (8001d10 <main+0x368>)
 80019b8:	0280      	lsls	r0, r0, #10
 80019ba:	6951      	ldr	r1, [r2, #20]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2600      	movs	r6, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4301      	orrs	r1, r0
 80019c0:	6151      	str	r1, [r2, #20]
 80019c2:	6953      	ldr	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019c4:	2110      	movs	r1, #16
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4003      	ands	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019c8:	2090      	movs	r0, #144	; 0x90
 80019ca:	2200      	movs	r2, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ce:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019d2:	f7fe fd79 	bl	80004c8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019d6:	2303      	movs	r3, #3
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019da:	ac08      	add	r4, sp, #32
 80019dc:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	0021      	movs	r1, r4
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e0:	3b01      	subs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e4:	60a3      	str	r3, [r4, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	6066      	str	r6, [r4, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f7fe fcb8 	bl	800035c <HAL_GPIO_Init>
	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	2090      	movs	r0, #144	; 0x90
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ee:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	05c0      	lsls	r0, r0, #23
 80019f4:	0021      	movs	r1, r4
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019f6:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f7fe fcad 	bl	800035c <HAL_GPIO_Init>
	hrtc.Instance = RTC;
 8001a02:	4fc4      	ldr	r7, [pc, #784]	; (8001d14 <main+0x36c>)
 8001a04:	4bc4      	ldr	r3, [pc, #784]	; (8001d18 <main+0x370>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a06:	0038      	movs	r0, r7
	hrtc.Instance = RTC;
 8001a08:	603b      	str	r3, [r7, #0]
	hrtc.Init.AsynchPrediv = 127;
 8001a0a:	237f      	movs	r3, #127	; 0x7f
 8001a0c:	60bb      	str	r3, [r7, #8]
	hrtc.Init.SynchPrediv = 255;
 8001a0e:	3380      	adds	r3, #128	; 0x80
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a10:	607e      	str	r6, [r7, #4]
	hrtc.Init.SynchPrediv = 255;
 8001a12:	60fb      	str	r3, [r7, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a14:	613e      	str	r6, [r7, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a16:	617e      	str	r6, [r7, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a18:	61be      	str	r6, [r7, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a1a:	f7ff fb71 	bl	8001100 <HAL_RTC_Init>
 8001a1e:	42b0      	cmp	r0, r6
 8001a20:	d000      	beq.n	8001a24 <main+0x7c>
 8001a22:	e7fe      	b.n	8001a22 <main+0x7a>
	sTime.Hours = 0x12;
 8001a24:	2312      	movs	r3, #18
	sTime.Minutes = 0x05;
 8001a26:	2605      	movs	r6, #5
	sTime.Hours = 0x12;
 8001a28:	a903      	add	r1, sp, #12
	sTime.Seconds = 0x0;
 8001a2a:	7088      	strb	r0, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a2c:	60c8      	str	r0, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a2e:	6108      	str	r0, [r1, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a30:	002a      	movs	r2, r5
 8001a32:	0038      	movs	r0, r7
	sTime.Hours = 0x12;
 8001a34:	700b      	strb	r3, [r1, #0]
	sTime.Minutes = 0x05;
 8001a36:	704e      	strb	r6, [r1, #1]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a38:	f7ff fbc2 	bl	80011c0 <HAL_RTC_SetTime>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d000      	beq.n	8001a42 <main+0x9a>
 8001a40:	e7fe      	b.n	8001a40 <main+0x98>
	sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001a42:	2306      	movs	r3, #6
 8001a44:	a901      	add	r1, sp, #4
 8001a46:	700b      	strb	r3, [r1, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 8001a48:	2311      	movs	r3, #17
 8001a4a:	704b      	strb	r3, [r1, #1]
	sDate.Date = 0x24;
 8001a4c:	3313      	adds	r3, #19
 8001a4e:	708b      	strb	r3, [r1, #2]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a50:	002a      	movs	r2, r5
	sDate.Year = 0x18;
 8001a52:	3b0c      	subs	r3, #12
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a54:	0038      	movs	r0, r7
	sDate.Year = 0x18;
 8001a56:	70cb      	strb	r3, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a58:	f7ff fc26 	bl	80012a8 <HAL_RTC_SetDate>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d000      	beq.n	8001a62 <main+0xba>
 8001a60:	e7fe      	b.n	8001a60 <main+0xb8>
	sAlarm.AlarmTime.Hours = 0x12;
 8001a62:	2312      	movs	r3, #18
 8001a64:	7023      	strb	r3, [r4, #0]
	sAlarm.AlarmTime.Seconds = 0x15;
 8001a66:	2315      	movs	r3, #21
 8001a68:	70a3      	strb	r3, [r4, #2]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	61e3      	str	r3, [r4, #28]
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_SATURDAY;
 8001a70:	2321      	movs	r3, #33	; 0x21
 8001a72:	2206      	movs	r2, #6
 8001a74:	446b      	add	r3, sp
 8001a76:	77da      	strb	r2, [r3, #31]
	sAlarm.Alarm = RTC_ALARM_A;
 8001a78:	2380      	movs	r3, #128	; 0x80
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a7a:	6060      	str	r0, [r4, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a7c:	60e0      	str	r0, [r4, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a7e:	6120      	str	r0, [r4, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a80:	6160      	str	r0, [r4, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a82:	61a0      	str	r0, [r4, #24]
	sAlarm.Alarm = RTC_ALARM_A;
 8001a84:	005b      	lsls	r3, r3, #1
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a86:	002a      	movs	r2, r5
 8001a88:	0021      	movs	r1, r4
 8001a8a:	0038      	movs	r0, r7
	sAlarm.AlarmTime.Minutes = 0x05;
 8001a8c:	7066      	strb	r6, [r4, #1]
	sAlarm.Alarm = RTC_ALARM_A;
 8001a8e:	6263      	str	r3, [r4, #36]	; 0x24
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a90:	f7ff fc6e 	bl	8001370 <HAL_RTC_SetAlarm>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d000      	beq.n	8001a9a <main+0xf2>
 8001a98:	e7fe      	b.n	8001a98 <main+0xf0>
	hi2c1.Instance = I2C1;
 8001a9a:	4ca0      	ldr	r4, [pc, #640]	; (8001d1c <main+0x374>)
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <main+0x378>)
	hi2c1.Init.OwnAddress1 = 0;
 8001a9e:	60a0      	str	r0, [r4, #8]
	hi2c1.Instance = I2C1;
 8001aa0:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x0000020B;
 8001aa2:	4ba0      	ldr	r3, [pc, #640]	; (8001d24 <main+0x37c>)
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa4:	6120      	str	r0, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001aa6:	6160      	str	r0, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aa8:	61a0      	str	r0, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aaa:	61e0      	str	r0, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aac:	6220      	str	r0, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aae:	0020      	movs	r0, r4
	hi2c1.Init.Timing = 0x0000020B;
 8001ab0:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab2:	60e5      	str	r5, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab4:	f7fe fdec 	bl	8000690 <HAL_I2C_Init>
 8001ab8:	1e01      	subs	r1, r0, #0
 8001aba:	d000      	beq.n	8001abe <main+0x116>
 8001abc:	e7fe      	b.n	8001abc <main+0x114>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001abe:	0020      	movs	r0, r4
 8001ac0:	f7fe ff6a 	bl	8000998 <HAL_I2CEx_ConfigAnalogFilter>
 8001ac4:	1e01      	subs	r1, r0, #0
 8001ac6:	d000      	beq.n	8001aca <main+0x122>
 8001ac8:	e7fe      	b.n	8001ac8 <main+0x120>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aca:	0020      	movs	r0, r4
 8001acc:	f7fe ff8a 	bl	80009e4 <HAL_I2CEx_ConfigDigitalFilter>
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d000      	beq.n	8001ad6 <main+0x12e>
 8001ad4:	e7fe      	b.n	8001ad4 <main+0x12c>
	check = SSD1306_Init();
 8001ad6:	f000 fa6d 	bl	8001fb4 <SSD1306_Init>
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <main+0x380>)
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001adc:	2490      	movs	r4, #144	; 0x90
	check = SSD1306_Init();
 8001ade:	7018      	strb	r0, [r3, #0]
	set_time();
 8001ae0:	f7ff fdb4 	bl	800164c <set_time>
	set_alarm ();
 8001ae4:	f7ff fdd8 	bl	8001698 <set_alarm>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001ae8:	05e4      	lsls	r4, r4, #23
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001aea:	4d90      	ldr	r5, [pc, #576]	; (8001d2c <main+0x384>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	0029      	movs	r1, r5
 8001af0:	0038      	movs	r0, r7
 8001af2:	f7ff fd89 	bl	8001608 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001af6:	4e8e      	ldr	r6, [pc, #568]	; (8001d30 <main+0x388>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	0031      	movs	r1, r6
 8001afc:	0038      	movs	r0, r7
 8001afe:	f7ff fd59 	bl	80015b4 <HAL_RTC_GetTime>
		get_time();
 8001b02:	f7ff fded 	bl	80016e0 <get_time>
		display_time();
 8001b06:	f7ff fe1f 	bl	8001748 <display_time>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	0020      	movs	r0, r4
 8001b0e:	f7fe fcd5 	bl	80004bc <HAL_GPIO_ReadPin>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d10b      	bne.n	8001b2e <main+0x186>
		if (alarm)
 8001b16:	4d87      	ldr	r5, [pc, #540]	; (8001d34 <main+0x38c>)
 8001b18:	782b      	ldrb	r3, [r5, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0e5      	beq.n	8001aea <main+0x142>
			to_do_on_alarm();
 8001b1e:	f7ff fedd 	bl	80018dc <to_do_on_alarm>
			alarm = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	702b      	strb	r3, [r5, #0]
 8001b26:	e7e0      	b.n	8001aea <main+0x142>
				HAL_Delay(20);
 8001b28:	2014      	movs	r0, #20
 8001b2a:	f7fe fba9 	bl	8000280 <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001b2e:	2101      	movs	r1, #1
 8001b30:	0020      	movs	r0, r4
 8001b32:	f7fe fcc3 	bl	80004bc <HAL_GPIO_ReadPin>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d1f6      	bne.n	8001b28 <main+0x180>
			SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8001b3a:	f000 f953 	bl	8001de4 <SSD1306_Fill>
			SSD1306_UpdateScreen();
 8001b3e:	f000 fa17 	bl	8001f70 <SSD1306_UpdateScreen>
			while(aux){ // Setar horas
 8001b42:	2301      	movs	r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0e6      	beq.n	8001b16 <main+0x16e>
				get_time();
 8001b48:	f7ff fdca 	bl	80016e0 <get_time>
				display_hour();
 8001b4c:	f7ff fe5c 	bl	8001808 <display_hour>
				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001b50:	0031      	movs	r1, r6
 8001b52:	2200      	movs	r2, #0
 8001b54:	486f      	ldr	r0, [pc, #444]	; (8001d14 <main+0x36c>)
 8001b56:	f7ff fd2d 	bl	80015b4 <HAL_RTC_GetTime>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	0020      	movs	r0, r4
 8001b5e:	f7fe fcad 	bl	80004bc <HAL_GPIO_ReadPin>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d000      	beq.n	8001b68 <main+0x1c0>
 8001b66:	e09f      	b.n	8001ca8 <main+0x300>
				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001b68:	2101      	movs	r1, #1
 8001b6a:	0020      	movs	r0, r4
 8001b6c:	f7fe fca6 	bl	80004bc <HAL_GPIO_ReadPin>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d0e6      	beq.n	8001b42 <main+0x19a>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001b74:	2101      	movs	r1, #1
 8001b76:	0020      	movs	r0, r4
 8001b78:	f7fe fca0 	bl	80004bc <HAL_GPIO_ReadPin>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d000      	beq.n	8001b82 <main+0x1da>
 8001b80:	e0a6      	b.n	8001cd0 <main+0x328>
					while(aux){// Setar minutos
 8001b82:	2301      	movs	r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0c6      	beq.n	8001b16 <main+0x16e>
						get_time();
 8001b88:	f7ff fdaa 	bl	80016e0 <get_time>
						display_hour();
 8001b8c:	f7ff fe3c 	bl	8001808 <display_hour>
						HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001b90:	0031      	movs	r1, r6
 8001b92:	2200      	movs	r2, #0
 8001b94:	485f      	ldr	r0, [pc, #380]	; (8001d14 <main+0x36c>)
 8001b96:	f7ff fd0d 	bl	80015b4 <HAL_RTC_GetTime>
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	0020      	movs	r0, r4
 8001b9e:	f7fe fc8d 	bl	80004bc <HAL_GPIO_ReadPin>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d000      	beq.n	8001ba8 <main+0x200>
 8001ba6:	e09a      	b.n	8001cde <main+0x336>
						if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001ba8:	2101      	movs	r1, #1
 8001baa:	0020      	movs	r0, r4
 8001bac:	f7fe fc86 	bl	80004bc <HAL_GPIO_ReadPin>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d0e6      	beq.n	8001b82 <main+0x1da>
							while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	0020      	movs	r0, r4
 8001bb8:	f7fe fc80 	bl	80004bc <HAL_GPIO_ReadPin>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d000      	beq.n	8001bc2 <main+0x21a>
 8001bc0:	e0a1      	b.n	8001d06 <main+0x35e>
							SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8001bc2:	f000 f90f 	bl	8001de4 <SSD1306_Fill>
							SSD1306_UpdateScreen();
 8001bc6:	f000 f9d3 	bl	8001f70 <SSD1306_UpdateScreen>
							while(aux){//setar dia
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0a2      	beq.n	8001b16 <main+0x16e>
								get_time();
 8001bd0:	f7ff fd86 	bl	80016e0 <get_time>
								display_date();
 8001bd4:	f7ff fe2a 	bl	800182c <display_date>
								HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001bd8:	0029      	movs	r1, r5
 8001bda:	2200      	movs	r2, #0
 8001bdc:	484d      	ldr	r0, [pc, #308]	; (8001d14 <main+0x36c>)
 8001bde:	f7ff fd13 	bl	8001608 <HAL_RTC_GetDate>
								if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001be2:	2102      	movs	r1, #2
 8001be4:	0020      	movs	r0, r4
 8001be6:	f7fe fc69 	bl	80004bc <HAL_GPIO_ReadPin>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d000      	beq.n	8001bf0 <main+0x248>
 8001bee:	e0a6      	b.n	8001d3e <main+0x396>
								if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	f7fe fc62 	bl	80004bc <HAL_GPIO_ReadPin>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d0e6      	beq.n	8001bca <main+0x222>
									while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	0020      	movs	r0, r4
 8001c00:	f7fe fc5c 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d000      	beq.n	8001c0a <main+0x262>
 8001c08:	e0ad      	b.n	8001d66 <main+0x3be>
									while(aux){//setar mes
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d082      	beq.n	8001b16 <main+0x16e>
										get_time();
 8001c10:	f7ff fd66 	bl	80016e0 <get_time>
										display_date();
 8001c14:	f7ff fe0a 	bl	800182c <display_date>
										HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c18:	0029      	movs	r1, r5
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	483d      	ldr	r0, [pc, #244]	; (8001d14 <main+0x36c>)
 8001c1e:	f7ff fcf3 	bl	8001608 <HAL_RTC_GetDate>
										if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001c22:	2102      	movs	r1, #2
 8001c24:	0020      	movs	r0, r4
										uint8_t mes=sDate.Month;
 8001c26:	786e      	ldrb	r6, [r5, #1]
										if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001c28:	f7fe fc48 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d000      	beq.n	8001c32 <main+0x28a>
 8001c30:	e0a0      	b.n	8001d74 <main+0x3cc>
										if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001c32:	2101      	movs	r1, #1
 8001c34:	0020      	movs	r0, r4
 8001c36:	f7fe fc41 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d0e5      	beq.n	8001c0a <main+0x262>
											while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001c3e:	2101      	movs	r1, #1
 8001c40:	0020      	movs	r0, r4
 8001c42:	f7fe fc3b 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d000      	beq.n	8001c4c <main+0x2a4>
 8001c4a:	e0a5      	b.n	8001d98 <main+0x3f0>
											SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8001c4c:	f000 f8ca 	bl	8001de4 <SSD1306_Fill>
											SSD1306_UpdateScreen();
 8001c50:	f000 f98e 	bl	8001f70 <SSD1306_UpdateScreen>
											while(aux){//setar dia da semana
 8001c54:	2301      	movs	r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <main+0x2b4>
 8001c5a:	e75c      	b.n	8001b16 <main+0x16e>
												get_time();
 8001c5c:	f7ff fd40 	bl	80016e0 <get_time>
												display_week();
 8001c60:	f7ff fdf6 	bl	8001850 <display_week>
												HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c64:	0029      	movs	r1, r5
 8001c66:	2200      	movs	r2, #0
 8001c68:	482a      	ldr	r0, [pc, #168]	; (8001d14 <main+0x36c>)
 8001c6a:	f7ff fccd 	bl	8001608 <HAL_RTC_GetDate>
												if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001c6e:	2102      	movs	r1, #2
 8001c70:	0020      	movs	r0, r4
												uint8_t aux1 = sDate.WeekDay;
 8001c72:	782e      	ldrb	r6, [r5, #0]
												if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001c74:	f7fe fc22 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d000      	beq.n	8001c7e <main+0x2d6>
 8001c7c:	e093      	b.n	8001da6 <main+0x3fe>
												if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001c7e:	2101      	movs	r1, #1
 8001c80:	0020      	movs	r0, r4
 8001c82:	f7fe fc1b 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0e4      	beq.n	8001c54 <main+0x2ac>
													while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)){
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	0020      	movs	r0, r4
 8001c8e:	f7fe fc15 	bl	80004bc <HAL_GPIO_ReadPin>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d000      	beq.n	8001c98 <main+0x2f0>
 8001c96:	e09d      	b.n	8001dd4 <main+0x42c>
													SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8001c98:	f000 f8a4 	bl	8001de4 <SSD1306_Fill>
													SSD1306_UpdateScreen();
 8001c9c:	f000 f968 	bl	8001f70 <SSD1306_UpdateScreen>
 8001ca0:	e739      	b.n	8001b16 <main+0x16e>
						HAL_Delay(20);
 8001ca2:	2014      	movs	r0, #20
 8001ca4:	f7fe faec 	bl	8000280 <HAL_Delay>
					while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001ca8:	2102      	movs	r1, #2
 8001caa:	0020      	movs	r0, r4
 8001cac:	f7fe fc06 	bl	80004bc <HAL_GPIO_ReadPin>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d1f6      	bne.n	8001ca2 <main+0x2fa>
					sTime.Hours ++;
 8001cb4:	7833      	ldrb	r3, [r6, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
					if(sTime.Hours==24){
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	d006      	beq.n	8001ccc <main+0x324>
					sTime.Hours ++;
 8001cbe:	7033      	strb	r3, [r6, #0]
					HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	0031      	movs	r1, r6
 8001cc4:	4813      	ldr	r0, [pc, #76]	; (8001d14 <main+0x36c>)
 8001cc6:	f7ff fa7b 	bl	80011c0 <HAL_RTC_SetTime>
 8001cca:	e74d      	b.n	8001b68 <main+0x1c0>
						sTime.Hours = 0;
 8001ccc:	7030      	strb	r0, [r6, #0]
 8001cce:	e7f7      	b.n	8001cc0 <main+0x318>
						HAL_Delay(20);
 8001cd0:	2014      	movs	r0, #20
 8001cd2:	f7fe fad5 	bl	8000280 <HAL_Delay>
 8001cd6:	e74d      	b.n	8001b74 <main+0x1cc>
								HAL_Delay(20);
 8001cd8:	2014      	movs	r0, #20
 8001cda:	f7fe fad1 	bl	8000280 <HAL_Delay>
							while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001cde:	2102      	movs	r1, #2
 8001ce0:	0020      	movs	r0, r4
 8001ce2:	f7fe fbeb 	bl	80004bc <HAL_GPIO_ReadPin>
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d1f6      	bne.n	8001cd8 <main+0x330>
							sTime.Minutes ++;
 8001cea:	7873      	ldrb	r3, [r6, #1]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2db      	uxtb	r3, r3
							if(sTime.Minutes==60){
 8001cf0:	2b3c      	cmp	r3, #60	; 0x3c
 8001cf2:	d006      	beq.n	8001d02 <main+0x35a>
							sTime.Minutes ++;
 8001cf4:	7073      	strb	r3, [r6, #1]
							HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	0031      	movs	r1, r6
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <main+0x36c>)
 8001cfc:	f7ff fa60 	bl	80011c0 <HAL_RTC_SetTime>
 8001d00:	e752      	b.n	8001ba8 <main+0x200>
								sTime.Minutes = 0;
 8001d02:	7070      	strb	r0, [r6, #1]
 8001d04:	e7f7      	b.n	8001cf6 <main+0x34e>
								HAL_Delay(20);
 8001d06:	2014      	movs	r0, #20
 8001d08:	f7fe faba 	bl	8000280 <HAL_Delay>
 8001d0c:	e752      	b.n	8001bb4 <main+0x20c>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	20000514 	.word	0x20000514
 8001d18:	40002800 	.word	0x40002800
 8001d1c:	200004a4 	.word	0x200004a4
 8001d20:	40005400 	.word	0x40005400
 8001d24:	0000020b 	.word	0x0000020b
 8001d28:	20000504 	.word	0x20000504
 8001d2c:	20000505 	.word	0x20000505
 8001d30:	200004f0 	.word	0x200004f0
 8001d34:	2000008c 	.word	0x2000008c
										HAL_Delay(20);
 8001d38:	2014      	movs	r0, #20
 8001d3a:	f7fe faa1 	bl	8000280 <HAL_Delay>
									while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001d3e:	2102      	movs	r1, #2
 8001d40:	0020      	movs	r0, r4
 8001d42:	f7fe fbbb 	bl	80004bc <HAL_GPIO_ReadPin>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d1f6      	bne.n	8001d38 <main+0x390>
									sDate.Date ++;
 8001d4a:	78ab      	ldrb	r3, [r5, #2]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
									if(sDate.Date==32){
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d006      	beq.n	8001d62 <main+0x3ba>
									HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d54:	2200      	movs	r2, #0
 8001d56:	0029      	movs	r1, r5
 8001d58:	4820      	ldr	r0, [pc, #128]	; (8001ddc <main+0x434>)
										sDate.Date = 1;
 8001d5a:	70ab      	strb	r3, [r5, #2]
									HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d5c:	f7ff faa4 	bl	80012a8 <HAL_RTC_SetDate>
 8001d60:	e746      	b.n	8001bf0 <main+0x248>
										sDate.Date = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e7f6      	b.n	8001d54 <main+0x3ac>
										HAL_Delay(20);
 8001d66:	2014      	movs	r0, #20
 8001d68:	f7fe fa8a 	bl	8000280 <HAL_Delay>
 8001d6c:	e746      	b.n	8001bfc <main+0x254>
												HAL_Delay(20);
 8001d6e:	2014      	movs	r0, #20
 8001d70:	f7fe fa86 	bl	8000280 <HAL_Delay>
											while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001d74:	2102      	movs	r1, #2
 8001d76:	0020      	movs	r0, r4
 8001d78:	f7fe fba0 	bl	80004bc <HAL_GPIO_ReadPin>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d1f6      	bne.n	8001d6e <main+0x3c6>
											mes ++;
 8001d80:	3601      	adds	r6, #1
 8001d82:	b2f6      	uxtb	r6, r6
											if(mes==13){
 8001d84:	2e0d      	cmp	r6, #13
 8001d86:	d100      	bne.n	8001d8a <main+0x3e2>
												mes = RTC_MONTH_JANUARY;
 8001d88:	3e0c      	subs	r6, #12
											HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	0029      	movs	r1, r5
 8001d8e:	4813      	ldr	r0, [pc, #76]	; (8001ddc <main+0x434>)
											sDate.Month = mes;
 8001d90:	706e      	strb	r6, [r5, #1]
											HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d92:	f7ff fa89 	bl	80012a8 <HAL_RTC_SetDate>
 8001d96:	e74c      	b.n	8001c32 <main+0x28a>
												HAL_Delay(20);
 8001d98:	2014      	movs	r0, #20
 8001d9a:	f7fe fa71 	bl	8000280 <HAL_Delay>
 8001d9e:	e74e      	b.n	8001c3e <main+0x296>
														HAL_Delay(20);
 8001da0:	2014      	movs	r0, #20
 8001da2:	f7fe fa6d 	bl	8000280 <HAL_Delay>
													while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)){
 8001da6:	2102      	movs	r1, #2
 8001da8:	0020      	movs	r0, r4
 8001daa:	f7fe fb87 	bl	80004bc <HAL_GPIO_ReadPin>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d1f6      	bne.n	8001da0 <main+0x3f8>
													aux1 ++;
 8001db2:	3601      	adds	r6, #1
 8001db4:	b2f6      	uxtb	r6, r6
													if(aux1==8){
 8001db6:	2e08      	cmp	r6, #8
 8001db8:	d100      	bne.n	8001dbc <main+0x414>
														aux1=0;
 8001dba:	0006      	movs	r6, r0
													sDate.WeekDay=aux1;
 8001dbc:	4908      	ldr	r1, [pc, #32]	; (8001de0 <main+0x438>)
													HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <main+0x434>)
													sDate.WeekDay=aux1;
 8001dc2:	700e      	strb	r6, [r1, #0]
													HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001dc4:	f7ff fa70 	bl	80012a8 <HAL_RTC_SetDate>
													SSD1306_Fill(SSD1306_COLOR_BLACK);// Tela preta
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f80b 	bl	8001de4 <SSD1306_Fill>
													SSD1306_UpdateScreen();
 8001dce:	f000 f8cf 	bl	8001f70 <SSD1306_UpdateScreen>
 8001dd2:	e754      	b.n	8001c7e <main+0x2d6>
														HAL_Delay(20);
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	f7fe fa53 	bl	8000280 <HAL_Delay>
 8001dda:	e756      	b.n	8001c8a <main+0x2e2>
 8001ddc:	20000514 	.word	0x20000514
 8001de0:	20000505 	.word	0x20000505

08001de4 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001de4:	2100      	movs	r1, #0
void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001de6:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001de8:	4288      	cmp	r0, r1
 8001dea:	d000      	beq.n	8001dee <SSD1306_Fill+0xa>
 8001dec:	31ff      	adds	r1, #255	; 0xff
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <SSD1306_Fill+0x18>)
 8001df2:	00d2      	lsls	r2, r2, #3
 8001df4:	f000 fa77 	bl	80022e6 <memset>
}
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	20000094 	.word	0x20000094

08001e00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001e00:	b510      	push	{r4, lr}
	if (
 8001e02:	287f      	cmp	r0, #127	; 0x7f
 8001e04:	d814      	bhi.n	8001e30 <SSD1306_DrawPixel+0x30>
		x >= SSD1306_WIDTH ||
 8001e06:	293f      	cmp	r1, #63	; 0x3f
 8001e08:	d812      	bhi.n	8001e30 <SSD1306_DrawPixel+0x30>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <SSD1306_DrawPixel+0x40>)
 8001e0c:	791b      	ldrb	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <SSD1306_DrawPixel+0x18>
		color = (SSD1306_COLOR_t)!color;
 8001e12:	4253      	negs	r3, r2
 8001e14:	415a      	adcs	r2, r3
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	08cb      	lsrs	r3, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	1818      	adds	r0, r3, r0
 8001e1e:	2307      	movs	r3, #7
 8001e20:	4c08      	ldr	r4, [pc, #32]	; (8001e44 <SSD1306_DrawPixel+0x44>)
 8001e22:	4019      	ands	r1, r3
	if (color == SSD1306_COLOR_WHITE) {
 8001e24:	2a01      	cmp	r2, #1
 8001e26:	d104      	bne.n	8001e32 <SSD1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e28:	408a      	lsls	r2, r1
 8001e2a:	5c23      	ldrb	r3, [r4, r0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	5422      	strb	r2, [r4, r0]
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}
 8001e30:	bd10      	pop	{r4, pc}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e32:	2201      	movs	r2, #1
 8001e34:	408a      	lsls	r2, r1
 8001e36:	5c23      	ldrb	r3, [r4, r0]
 8001e38:	4393      	bics	r3, r2
 8001e3a:	5423      	strb	r3, [r4, r0]
 8001e3c:	e7f8      	b.n	8001e30 <SSD1306_DrawPixel+0x30>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	2000008e 	.word	0x2000008e
 8001e44:	20000094 	.word	0x20000094

08001e48 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e48:	4b01      	ldr	r3, [pc, #4]	; (8001e50 <SSD1306_GotoXY+0x8>)
 8001e4a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001e4c:	8059      	strh	r1, [r3, #2]
}
 8001e4e:	4770      	bx	lr
 8001e50:	2000008e 	.word	0x2000008e

08001e54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	9202      	str	r2, [sp, #8]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e5a:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e5c:	000c      	movs	r4, r1
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e5e:	8813      	ldrh	r3, [r2, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e60:	0007      	movs	r7, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	780b      	ldrb	r3, [r1, #0]
 8001e66:	9900      	ldr	r1, [sp, #0]
 8001e68:	185b      	adds	r3, r3, r1
	if (
 8001e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e6c:	dc07      	bgt.n	8001e7e <SSD1306_Putc+0x2a>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001e6e:	8853      	ldrh	r3, [r2, #2]
 8001e70:	2600      	movs	r6, #0
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	9a01      	ldr	r2, [sp, #4]
 8001e76:	7863      	ldrb	r3, [r4, #1]
 8001e78:	189b      	adds	r3, r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7c:	dd0e      	ble.n	8001e9c <SSD1306_Putc+0x48>
	) {
		/* Error */
		return 0;
 8001e7e:	2700      	movs	r7, #0
 8001e80:	e014      	b.n	8001eac <SSD1306_Putc+0x58>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e82:	003a      	movs	r2, r7
		for (j = 0; j < Font->FontWidth; j++) {
 8001e84:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e86:	3a20      	subs	r2, #32
 8001e88:	4353      	muls	r3, r2
 8001e8a:	6862      	ldr	r2, [r4, #4]
 8001e8c:	199b      	adds	r3, r3, r6
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	5a9b      	ldrh	r3, [r3, r2]
 8001e92:	9303      	str	r3, [sp, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001e94:	7823      	ldrb	r3, [r4, #0]
 8001e96:	429d      	cmp	r5, r3
 8001e98:	d30b      	bcc.n	8001eb2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	7863      	ldrb	r3, [r4, #1]
 8001e9e:	429e      	cmp	r6, r3
 8001ea0:	d3ef      	bcc.n	8001e82 <SSD1306_Putc+0x2e>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ea2:	9a00      	ldr	r2, [sp, #0]
 8001ea4:	7823      	ldrb	r3, [r4, #0]
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <SSD1306_Putc+0x94>)
 8001eaa:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
}
 8001eac:	0038      	movs	r0, r7
 8001eae:	b005      	add	sp, #20
 8001eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb2:	9b01      	ldr	r3, [sp, #4]
			if ((b << j) & 0x8000) {
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	1999      	adds	r1, r3, r6
 8001eb8:	9b03      	ldr	r3, [sp, #12]
 8001eba:	0212      	lsls	r2, r2, #8
 8001ebc:	40ab      	lsls	r3, r5
 8001ebe:	4213      	tst	r3, r2
 8001ec0:	d008      	beq.n	8001ed4 <SSD1306_Putc+0x80>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ec2:	9b00      	ldr	r3, [sp, #0]
 8001ec4:	9a02      	ldr	r2, [sp, #8]
 8001ec6:	1958      	adds	r0, r3, r5
 8001ec8:	b289      	uxth	r1, r1
 8001eca:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ecc:	f7ff ff98 	bl	8001e00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001ed0:	3501      	adds	r5, #1
 8001ed2:	e7df      	b.n	8001e94 <SSD1306_Putc+0x40>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ed4:	9a02      	ldr	r2, [sp, #8]
 8001ed6:	b289      	uxth	r1, r1
 8001ed8:	4253      	negs	r3, r2
 8001eda:	415a      	adcs	r2, r3
 8001edc:	9b00      	ldr	r3, [sp, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	1958      	adds	r0, r3, r5
 8001ee2:	b280      	uxth	r0, r0
 8001ee4:	e7f2      	b.n	8001ecc <SSD1306_Putc+0x78>
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	2000008e 	.word	0x2000008e

08001eec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	0004      	movs	r4, r0
 8001ef0:	000d      	movs	r5, r1
 8001ef2:	0016      	movs	r6, r2
	/* Write characters */
	while (*str) {
 8001ef4:	7820      	ldrb	r0, [r4, #0]
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d100      	bne.n	8001efc <SSD1306_Puts+0x10>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001efc:	0032      	movs	r2, r6
 8001efe:	0029      	movs	r1, r5
 8001f00:	f7ff ffa8 	bl	8001e54 <SSD1306_Putc>
 8001f04:	0003      	movs	r3, r0
 8001f06:	7820      	ldrb	r0, [r4, #0]
 8001f08:	4283      	cmp	r3, r0
 8001f0a:	d1f6      	bne.n	8001efa <SSD1306_Puts+0xe>
		str++;
 8001f0c:	3401      	adds	r4, #1
 8001f0e:	e7f1      	b.n	8001ef4 <SSD1306_Puts+0x8>

08001f10 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f10:	b5b3      	push	{r0, r1, r4, r5, r7, lr}
	uint8_t dt[count + 1];
 8001f12:	001c      	movs	r4, r3
 8001f14:	466d      	mov	r5, sp
 8001f16:	3408      	adds	r4, #8
 8001f18:	08e4      	lsrs	r4, r4, #3
 8001f1a:	00e4      	lsls	r4, r4, #3
 8001f1c:	1b2c      	subs	r4, r5, r4
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f1e:	af02      	add	r7, sp, #8
	uint8_t dt[count + 1];
 8001f20:	46a5      	mov	sp, r4
	dt[0] = reg;
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001f22:	2401      	movs	r4, #1
	uint8_t dt[count + 1];
 8001f24:	ad02      	add	r5, sp, #8
	dt[0] = reg;
 8001f26:	7029      	strb	r1, [r5, #0]
	for(i = 1; i <= count; i++)
 8001f28:	42a3      	cmp	r3, r4
 8001f2a:	d208      	bcs.n	8001f3e <ssd1306_I2C_WriteMulti+0x2e>
		dt[i] = data[i-1];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	b281      	uxth	r1, r0
 8001f30:	9200      	str	r2, [sp, #0]
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <ssd1306_I2C_WriteMulti+0x3c>)
 8001f34:	002a      	movs	r2, r5
 8001f36:	f7fe fc01 	bl	800073c <HAL_I2C_Master_Transmit>
}
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdb0      	pop	{r4, r5, r7, pc}
		dt[i] = data[i-1];
 8001f3e:	1911      	adds	r1, r2, r4
 8001f40:	3901      	subs	r1, #1
 8001f42:	7809      	ldrb	r1, [r1, #0]
 8001f44:	5529      	strb	r1, [r5, r4]
	for(i = 1; i <= count; i++)
 8001f46:	3401      	adds	r4, #1
 8001f48:	b2e4      	uxtb	r4, r4
 8001f4a:	e7ed      	b.n	8001f28 <ssd1306_I2C_WriteMulti+0x18>
 8001f4c:	200004a4 	.word	0x200004a4

08001f50 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f52:	230a      	movs	r3, #10
	dt[0] = reg;
 8001f54:	ac03      	add	r4, sp, #12
 8001f56:	7021      	strb	r1, [r4, #0]
	dt[1] = data;
 8001f58:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f5a:	b281      	uxth	r1, r0
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	0022      	movs	r2, r4
 8001f60:	3b08      	subs	r3, #8
 8001f62:	4802      	ldr	r0, [pc, #8]	; (8001f6c <ssd1306_I2C_Write+0x1c>)
 8001f64:	f7fe fbea 	bl	800073c <HAL_I2C_Master_Transmit>
}
 8001f68:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	200004a4 	.word	0x200004a4

08001f70 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	2400      	movs	r4, #0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f74:	2578      	movs	r5, #120	; 0x78
 8001f76:	0022      	movs	r2, r4
 8001f78:	3a50      	subs	r2, #80	; 0x50
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	0028      	movs	r0, r5
 8001f80:	f7ff ffe6 	bl	8001f50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f84:	2200      	movs	r2, #0
 8001f86:	0028      	movs	r0, r5
 8001f88:	0011      	movs	r1, r2
 8001f8a:	f7ff ffe1 	bl	8001f50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f8e:	2210      	movs	r2, #16
 8001f90:	2100      	movs	r1, #0
 8001f92:	0028      	movs	r0, r5
 8001f94:	f7ff ffdc 	bl	8001f50 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f98:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <SSD1306_UpdateScreen+0x40>)
 8001f9a:	01e3      	lsls	r3, r4, #7
 8001f9c:	18d2      	adds	r2, r2, r3
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	0028      	movs	r0, r5
 8001fa4:	3401      	adds	r4, #1
 8001fa6:	f7ff ffb3 	bl	8001f10 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001faa:	2c08      	cmp	r4, #8
 8001fac:	d1e3      	bne.n	8001f76 <SSD1306_UpdateScreen+0x6>
}
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
 8001fb0:	20000094 	.word	0x20000094

08001fb4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001fb4:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <SSD1306_Init+0x148>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2178      	movs	r1, #120	; 0x78
 8001fbc:	4850      	ldr	r0, [pc, #320]	; (8002100 <SSD1306_Init+0x14c>)
 8001fbe:	f7fe fc55 	bl	800086c <HAL_I2C_IsDeviceReady>
		return 0;
 8001fc2:	2400      	movs	r4, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fc4:	42a0      	cmp	r0, r4
 8001fc6:	d000      	beq.n	8001fca <SSD1306_Init+0x16>
 8001fc8:	e095      	b.n	80020f6 <SSD1306_Init+0x142>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001fca:	0021      	movs	r1, r4
 8001fcc:	22ae      	movs	r2, #174	; 0xae
 8001fce:	2078      	movs	r0, #120	; 0x78
 8001fd0:	f7ff ffbe 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001fd4:	0021      	movs	r1, r4
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	2078      	movs	r0, #120	; 0x78
 8001fda:	f7ff ffb9 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001fde:	0021      	movs	r1, r4
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	2078      	movs	r0, #120	; 0x78
 8001fe4:	f7ff ffb4 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fe8:	0021      	movs	r1, r4
 8001fea:	22b0      	movs	r2, #176	; 0xb0
 8001fec:	2078      	movs	r0, #120	; 0x78
 8001fee:	f7ff ffaf 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001ff2:	0021      	movs	r1, r4
 8001ff4:	22c8      	movs	r2, #200	; 0xc8
 8001ff6:	2078      	movs	r0, #120	; 0x78
 8001ff8:	f7ff ffaa 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001ffc:	0022      	movs	r2, r4
 8001ffe:	0021      	movs	r1, r4
 8002000:	2078      	movs	r0, #120	; 0x78
 8002002:	f7ff ffa5 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002006:	0021      	movs	r1, r4
 8002008:	2210      	movs	r2, #16
 800200a:	2078      	movs	r0, #120	; 0x78
 800200c:	f7ff ffa0 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002010:	0021      	movs	r1, r4
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	2078      	movs	r0, #120	; 0x78
 8002016:	f7ff ff9b 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800201a:	0021      	movs	r1, r4
 800201c:	2281      	movs	r2, #129	; 0x81
 800201e:	2078      	movs	r0, #120	; 0x78
 8002020:	f7ff ff96 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002024:	0021      	movs	r1, r4
 8002026:	22ff      	movs	r2, #255	; 0xff
 8002028:	2078      	movs	r0, #120	; 0x78
 800202a:	f7ff ff91 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800202e:	0021      	movs	r1, r4
 8002030:	22a1      	movs	r2, #161	; 0xa1
 8002032:	2078      	movs	r0, #120	; 0x78
 8002034:	f7ff ff8c 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002038:	0021      	movs	r1, r4
 800203a:	22a6      	movs	r2, #166	; 0xa6
 800203c:	2078      	movs	r0, #120	; 0x78
 800203e:	f7ff ff87 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002042:	0021      	movs	r1, r4
 8002044:	22a8      	movs	r2, #168	; 0xa8
 8002046:	2078      	movs	r0, #120	; 0x78
 8002048:	f7ff ff82 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800204c:	0021      	movs	r1, r4
 800204e:	223f      	movs	r2, #63	; 0x3f
 8002050:	2078      	movs	r0, #120	; 0x78
 8002052:	f7ff ff7d 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002056:	0021      	movs	r1, r4
 8002058:	22a4      	movs	r2, #164	; 0xa4
 800205a:	2078      	movs	r0, #120	; 0x78
 800205c:	f7ff ff78 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002060:	0021      	movs	r1, r4
 8002062:	22d3      	movs	r2, #211	; 0xd3
 8002064:	2078      	movs	r0, #120	; 0x78
 8002066:	f7ff ff73 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800206a:	0022      	movs	r2, r4
 800206c:	0021      	movs	r1, r4
 800206e:	2078      	movs	r0, #120	; 0x78
 8002070:	f7ff ff6e 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002074:	0021      	movs	r1, r4
 8002076:	22d5      	movs	r2, #213	; 0xd5
 8002078:	2078      	movs	r0, #120	; 0x78
 800207a:	f7ff ff69 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800207e:	0021      	movs	r1, r4
 8002080:	22f0      	movs	r2, #240	; 0xf0
 8002082:	2078      	movs	r0, #120	; 0x78
 8002084:	f7ff ff64 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002088:	0021      	movs	r1, r4
 800208a:	22d9      	movs	r2, #217	; 0xd9
 800208c:	2078      	movs	r0, #120	; 0x78
 800208e:	f7ff ff5f 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002092:	0021      	movs	r1, r4
 8002094:	2222      	movs	r2, #34	; 0x22
 8002096:	2078      	movs	r0, #120	; 0x78
 8002098:	f7ff ff5a 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800209c:	0021      	movs	r1, r4
 800209e:	22da      	movs	r2, #218	; 0xda
 80020a0:	2078      	movs	r0, #120	; 0x78
 80020a2:	f7ff ff55 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020a6:	0021      	movs	r1, r4
 80020a8:	2212      	movs	r2, #18
 80020aa:	2078      	movs	r0, #120	; 0x78
 80020ac:	f7ff ff50 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020b0:	0021      	movs	r1, r4
 80020b2:	22db      	movs	r2, #219	; 0xdb
 80020b4:	2078      	movs	r0, #120	; 0x78
 80020b6:	f7ff ff4b 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020ba:	0021      	movs	r1, r4
 80020bc:	2220      	movs	r2, #32
 80020be:	2078      	movs	r0, #120	; 0x78
 80020c0:	f7ff ff46 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020c4:	0021      	movs	r1, r4
 80020c6:	228d      	movs	r2, #141	; 0x8d
 80020c8:	2078      	movs	r0, #120	; 0x78
 80020ca:	f7ff ff41 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020ce:	0021      	movs	r1, r4
 80020d0:	2214      	movs	r2, #20
 80020d2:	2078      	movs	r0, #120	; 0x78
 80020d4:	f7ff ff3c 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80020d8:	0021      	movs	r1, r4
 80020da:	22af      	movs	r2, #175	; 0xaf
 80020dc:	2078      	movs	r0, #120	; 0x78
 80020de:	f7ff ff37 	bl	8001f50 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80020e2:	0020      	movs	r0, r4
 80020e4:	f7ff fe7e 	bl	8001de4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80020e8:	f7ff ff42 	bl	8001f70 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SSD1306_Init+0x150>)
 80020ee:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 80020f0:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 80020f2:	3401      	adds	r4, #1
 80020f4:	715c      	strb	r4, [r3, #5]
}
 80020f6:	0020      	movs	r0, r4
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	00004e20 	.word	0x00004e20
 8002100:	200004a4 	.word	0x200004a4
 8002104:	2000008e 	.word	0x2000008e

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2001      	movs	r0, #1
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_MspInit+0x4c>)
 800210e:	6999      	ldr	r1, [r3, #24]
 8002110:	4301      	orrs	r1, r0
 8002112:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	4002      	ands	r2, r0
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002122:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	430a      	orrs	r2, r1
 8002126:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	400b      	ands	r3, r1
 800212e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002130:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002134:	f7fe f8b4 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2002      	movs	r0, #2
 800213c:	0011      	movs	r1, r2
 800213e:	4240      	negs	r0, r0
 8002140:	f7fe f8ae 	bl	80002a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2001      	movs	r0, #1
 8002148:	0011      	movs	r1, r2
 800214a:	4240      	negs	r0, r0
 800214c:	f7fe f8a8 	bl	80002a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002150:	bd07      	pop	{r0, r1, r2, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_I2C_MspInit+0x44>)
 800215c:	6802      	ldr	r2, [r0, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d119      	bne.n	8002196 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002168:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216e:	3b11      	subs	r3, #17
 8002170:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002172:	3302      	adds	r3, #2
 8002174:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002178:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800217c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f7fe f8ed 	bl	800035c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002182:	2080      	movs	r0, #128	; 0x80
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_I2C_MspInit+0x48>)
 8002186:	0380      	lsls	r0, r0, #14
 8002188:	69d1      	ldr	r1, [r2, #28]
 800218a:	4301      	orrs	r1, r0
 800218c:	61d1      	str	r1, [r2, #28]
 800218e:	69d3      	ldr	r3, [r2, #28]
 8002190:	4003      	ands	r3, r0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002196:	b007      	add	sp, #28
 8002198:	bd00      	pop	{pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	40005400 	.word	0x40005400
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RTC_MspInit+0x18>)
 80021a6:	6802      	ldr	r2, [r0, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d105      	bne.n	80021b8 <HAL_RTC_MspInit+0x14>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_RTC_MspInit+0x1c>)
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	6a11      	ldr	r1, [r2, #32]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6213      	str	r3, [r2, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021b8:	4770      	bx	lr
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	40002800 	.word	0x40002800
 80021c0:	40021000 	.word	0x40021000

080021c4 <NMI_Handler>:
 80021c4:	4770      	bx	lr

080021c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler>

080021c8 <SVC_Handler>:
 80021c8:	4770      	bx	lr

080021ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ce:	f7fe f849 	bl	8000264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80021d2:	f7fe f8be 	bl	8000352 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bd10      	pop	{r4, pc}

080021d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80021d8:	2101      	movs	r1, #1
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80021dc:	4811      	ldr	r0, [pc, #68]	; (8002224 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4002      	ands	r2, r0
 80021e8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	480e      	ldr	r0, [pc, #56]	; (8002228 <SystemInit+0x50>)
 80021ee:	4002      	ands	r2, r0
 80021f0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <SystemInit+0x54>)
 80021f6:	4002      	ands	r2, r0
 80021f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <SystemInit+0x58>)
 80021fe:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002200:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002202:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002206:	4382      	bics	r2, r0
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800220a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220c:	4809      	ldr	r0, [pc, #36]	; (8002234 <SystemInit+0x5c>)
 800220e:	4002      	ands	r2, r0
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002214:	438a      	bics	r2, r1
 8002216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]

}
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	08ffb80c 	.word	0x08ffb80c
 8002228:	fef6ffff 	.word	0xfef6ffff
 800222c:	fffbffff 	.word	0xfffbffff
 8002230:	ffc0ffff 	.word	0xffc0ffff
 8002234:	fffffeec 	.word	0xfffffeec

08002238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800223a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopForever+0x6>)
  ldr r1, =_edata
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <LoopForever+0xe>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002254:	4c0b      	ldr	r4, [pc, #44]	; (8002284 <LoopForever+0x16>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002262:	f7ff ffb9 	bl	80021d8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002266:	f000 f811 	bl	800228c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800226a:	f7ff fb9d 	bl	80019a8 <main>

0800226e <LoopForever>:

LoopForever:
    b LoopForever
 800226e:	e7fe      	b.n	800226e <LoopForever>
  ldr   r0, =_estack
 8002270:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800227c:	080033d0 	.word	0x080033d0
  ldr r2, =_sbss
 8002280:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002284:	2000054c 	.word	0x2000054c

08002288 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC1_IRQHandler>
	...

0800228c <__libc_init_array>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	2600      	movs	r6, #0
 8002290:	4d0c      	ldr	r5, [pc, #48]	; (80022c4 <__libc_init_array+0x38>)
 8002292:	4c0d      	ldr	r4, [pc, #52]	; (80022c8 <__libc_init_array+0x3c>)
 8002294:	1b64      	subs	r4, r4, r5
 8002296:	10a4      	asrs	r4, r4, #2
 8002298:	42a6      	cmp	r6, r4
 800229a:	d109      	bne.n	80022b0 <__libc_init_array+0x24>
 800229c:	2600      	movs	r6, #0
 800229e:	f000 fc53 	bl	8002b48 <_init>
 80022a2:	4d0a      	ldr	r5, [pc, #40]	; (80022cc <__libc_init_array+0x40>)
 80022a4:	4c0a      	ldr	r4, [pc, #40]	; (80022d0 <__libc_init_array+0x44>)
 80022a6:	1b64      	subs	r4, r4, r5
 80022a8:	10a4      	asrs	r4, r4, #2
 80022aa:	42a6      	cmp	r6, r4
 80022ac:	d105      	bne.n	80022ba <__libc_init_array+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	00b3      	lsls	r3, r6, #2
 80022b2:	58eb      	ldr	r3, [r5, r3]
 80022b4:	4798      	blx	r3
 80022b6:	3601      	adds	r6, #1
 80022b8:	e7ee      	b.n	8002298 <__libc_init_array+0xc>
 80022ba:	00b3      	lsls	r3, r6, #2
 80022bc:	58eb      	ldr	r3, [r5, r3]
 80022be:	4798      	blx	r3
 80022c0:	3601      	adds	r6, #1
 80022c2:	e7f2      	b.n	80022aa <__libc_init_array+0x1e>
 80022c4:	080033c8 	.word	0x080033c8
 80022c8:	080033c8 	.word	0x080033c8
 80022cc:	080033c8 	.word	0x080033c8
 80022d0:	080033cc 	.word	0x080033cc

080022d4 <memcpy>:
 80022d4:	2300      	movs	r3, #0
 80022d6:	b510      	push	{r4, lr}
 80022d8:	429a      	cmp	r2, r3
 80022da:	d100      	bne.n	80022de <memcpy+0xa>
 80022dc:	bd10      	pop	{r4, pc}
 80022de:	5ccc      	ldrb	r4, [r1, r3]
 80022e0:	54c4      	strb	r4, [r0, r3]
 80022e2:	3301      	adds	r3, #1
 80022e4:	e7f8      	b.n	80022d8 <memcpy+0x4>

080022e6 <memset>:
 80022e6:	0003      	movs	r3, r0
 80022e8:	1882      	adds	r2, r0, r2
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d100      	bne.n	80022f0 <memset+0xa>
 80022ee:	4770      	bx	lr
 80022f0:	7019      	strb	r1, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	e7f9      	b.n	80022ea <memset+0x4>
	...

080022f8 <siprintf>:
 80022f8:	b40e      	push	{r1, r2, r3}
 80022fa:	b510      	push	{r4, lr}
 80022fc:	b09d      	sub	sp, #116	; 0x74
 80022fe:	a902      	add	r1, sp, #8
 8002300:	9002      	str	r0, [sp, #8]
 8002302:	6108      	str	r0, [r1, #16]
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <siprintf+0x3c>)
 8002306:	2482      	movs	r4, #130	; 0x82
 8002308:	6088      	str	r0, [r1, #8]
 800230a:	6148      	str	r0, [r1, #20]
 800230c:	2001      	movs	r0, #1
 800230e:	4240      	negs	r0, r0
 8002310:	ab1f      	add	r3, sp, #124	; 0x7c
 8002312:	81c8      	strh	r0, [r1, #14]
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <siprintf+0x40>)
 8002316:	cb04      	ldmia	r3!, {r2}
 8002318:	00a4      	lsls	r4, r4, #2
 800231a:	6800      	ldr	r0, [r0, #0]
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	818c      	strh	r4, [r1, #12]
 8002320:	f000 f86e 	bl	8002400 <_svfiprintf_r>
 8002324:	2300      	movs	r3, #0
 8002326:	9a02      	ldr	r2, [sp, #8]
 8002328:	7013      	strb	r3, [r2, #0]
 800232a:	b01d      	add	sp, #116	; 0x74
 800232c:	bc10      	pop	{r4}
 800232e:	bc08      	pop	{r3}
 8002330:	b003      	add	sp, #12
 8002332:	4718      	bx	r3
 8002334:	7fffffff 	.word	0x7fffffff
 8002338:	2000000c 	.word	0x2000000c

0800233c <__ssputs_r>:
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	688e      	ldr	r6, [r1, #8]
 8002340:	b085      	sub	sp, #20
 8002342:	0007      	movs	r7, r0
 8002344:	000c      	movs	r4, r1
 8002346:	9203      	str	r2, [sp, #12]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	429e      	cmp	r6, r3
 800234c:	d839      	bhi.n	80023c2 <__ssputs_r+0x86>
 800234e:	2390      	movs	r3, #144	; 0x90
 8002350:	898a      	ldrh	r2, [r1, #12]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	421a      	tst	r2, r3
 8002356:	d034      	beq.n	80023c2 <__ssputs_r+0x86>
 8002358:	2503      	movs	r5, #3
 800235a:	6909      	ldr	r1, [r1, #16]
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	1a5b      	subs	r3, r3, r1
 8002360:	9302      	str	r3, [sp, #8]
 8002362:	6963      	ldr	r3, [r4, #20]
 8002364:	9802      	ldr	r0, [sp, #8]
 8002366:	435d      	muls	r5, r3
 8002368:	0feb      	lsrs	r3, r5, #31
 800236a:	195d      	adds	r5, r3, r5
 800236c:	9b01      	ldr	r3, [sp, #4]
 800236e:	106d      	asrs	r5, r5, #1
 8002370:	3301      	adds	r3, #1
 8002372:	181b      	adds	r3, r3, r0
 8002374:	42ab      	cmp	r3, r5
 8002376:	d900      	bls.n	800237a <__ssputs_r+0x3e>
 8002378:	001d      	movs	r5, r3
 800237a:	0553      	lsls	r3, r2, #21
 800237c:	d532      	bpl.n	80023e4 <__ssputs_r+0xa8>
 800237e:	0029      	movs	r1, r5
 8002380:	0038      	movs	r0, r7
 8002382:	f000 fb31 	bl	80029e8 <_malloc_r>
 8002386:	1e06      	subs	r6, r0, #0
 8002388:	d109      	bne.n	800239e <__ssputs_r+0x62>
 800238a:	230c      	movs	r3, #12
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	2001      	movs	r0, #1
 8002392:	89a2      	ldrh	r2, [r4, #12]
 8002394:	4240      	negs	r0, r0
 8002396:	4313      	orrs	r3, r2
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	b005      	add	sp, #20
 800239c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239e:	9a02      	ldr	r2, [sp, #8]
 80023a0:	6921      	ldr	r1, [r4, #16]
 80023a2:	f7ff ff97 	bl	80022d4 <memcpy>
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <__ssputs_r+0xc0>)
 80023aa:	401a      	ands	r2, r3
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	4313      	orrs	r3, r2
 80023b0:	81a3      	strh	r3, [r4, #12]
 80023b2:	9b02      	ldr	r3, [sp, #8]
 80023b4:	6126      	str	r6, [r4, #16]
 80023b6:	18f6      	adds	r6, r6, r3
 80023b8:	6026      	str	r6, [r4, #0]
 80023ba:	6165      	str	r5, [r4, #20]
 80023bc:	9e01      	ldr	r6, [sp, #4]
 80023be:	1aed      	subs	r5, r5, r3
 80023c0:	60a5      	str	r5, [r4, #8]
 80023c2:	9b01      	ldr	r3, [sp, #4]
 80023c4:	42b3      	cmp	r3, r6
 80023c6:	d200      	bcs.n	80023ca <__ssputs_r+0x8e>
 80023c8:	001e      	movs	r6, r3
 80023ca:	0032      	movs	r2, r6
 80023cc:	9903      	ldr	r1, [sp, #12]
 80023ce:	6820      	ldr	r0, [r4, #0]
 80023d0:	f000 faad 	bl	800292e <memmove>
 80023d4:	68a3      	ldr	r3, [r4, #8]
 80023d6:	2000      	movs	r0, #0
 80023d8:	1b9b      	subs	r3, r3, r6
 80023da:	60a3      	str	r3, [r4, #8]
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	199e      	adds	r6, r3, r6
 80023e0:	6026      	str	r6, [r4, #0]
 80023e2:	e7da      	b.n	800239a <__ssputs_r+0x5e>
 80023e4:	002a      	movs	r2, r5
 80023e6:	0038      	movs	r0, r7
 80023e8:	f000 fb5c 	bl	8002aa4 <_realloc_r>
 80023ec:	1e06      	subs	r6, r0, #0
 80023ee:	d1e0      	bne.n	80023b2 <__ssputs_r+0x76>
 80023f0:	6921      	ldr	r1, [r4, #16]
 80023f2:	0038      	movs	r0, r7
 80023f4:	f000 faae 	bl	8002954 <_free_r>
 80023f8:	e7c7      	b.n	800238a <__ssputs_r+0x4e>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	fffffb7f 	.word	0xfffffb7f

08002400 <_svfiprintf_r>:
 8002400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002402:	b09f      	sub	sp, #124	; 0x7c
 8002404:	9002      	str	r0, [sp, #8]
 8002406:	9305      	str	r3, [sp, #20]
 8002408:	898b      	ldrh	r3, [r1, #12]
 800240a:	000f      	movs	r7, r1
 800240c:	0016      	movs	r6, r2
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	d511      	bpl.n	8002436 <_svfiprintf_r+0x36>
 8002412:	690b      	ldr	r3, [r1, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <_svfiprintf_r+0x36>
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	f000 fae5 	bl	80029e8 <_malloc_r>
 800241e:	6038      	str	r0, [r7, #0]
 8002420:	6138      	str	r0, [r7, #16]
 8002422:	2800      	cmp	r0, #0
 8002424:	d105      	bne.n	8002432 <_svfiprintf_r+0x32>
 8002426:	230c      	movs	r3, #12
 8002428:	9a02      	ldr	r2, [sp, #8]
 800242a:	3801      	subs	r0, #1
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	b01f      	add	sp, #124	; 0x7c
 8002430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	2300      	movs	r3, #0
 8002438:	ad06      	add	r5, sp, #24
 800243a:	616b      	str	r3, [r5, #20]
 800243c:	3320      	adds	r3, #32
 800243e:	766b      	strb	r3, [r5, #25]
 8002440:	3310      	adds	r3, #16
 8002442:	76ab      	strb	r3, [r5, #26]
 8002444:	0034      	movs	r4, r6
 8002446:	7823      	ldrb	r3, [r4, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d147      	bne.n	80024dc <_svfiprintf_r+0xdc>
 800244c:	1ba3      	subs	r3, r4, r6
 800244e:	9304      	str	r3, [sp, #16]
 8002450:	d00d      	beq.n	800246e <_svfiprintf_r+0x6e>
 8002452:	1ba3      	subs	r3, r4, r6
 8002454:	0032      	movs	r2, r6
 8002456:	0039      	movs	r1, r7
 8002458:	9802      	ldr	r0, [sp, #8]
 800245a:	f7ff ff6f 	bl	800233c <__ssputs_r>
 800245e:	1c43      	adds	r3, r0, #1
 8002460:	d100      	bne.n	8002464 <_svfiprintf_r+0x64>
 8002462:	e0b5      	b.n	80025d0 <_svfiprintf_r+0x1d0>
 8002464:	696a      	ldr	r2, [r5, #20]
 8002466:	9b04      	ldr	r3, [sp, #16]
 8002468:	4694      	mov	ip, r2
 800246a:	4463      	add	r3, ip
 800246c:	616b      	str	r3, [r5, #20]
 800246e:	7823      	ldrb	r3, [r4, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d100      	bne.n	8002476 <_svfiprintf_r+0x76>
 8002474:	e0ac      	b.n	80025d0 <_svfiprintf_r+0x1d0>
 8002476:	2201      	movs	r2, #1
 8002478:	2300      	movs	r3, #0
 800247a:	4252      	negs	r2, r2
 800247c:	606a      	str	r2, [r5, #4]
 800247e:	a902      	add	r1, sp, #8
 8002480:	3254      	adds	r2, #84	; 0x54
 8002482:	1852      	adds	r2, r2, r1
 8002484:	3401      	adds	r4, #1
 8002486:	602b      	str	r3, [r5, #0]
 8002488:	60eb      	str	r3, [r5, #12]
 800248a:	60ab      	str	r3, [r5, #8]
 800248c:	7013      	strb	r3, [r2, #0]
 800248e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002490:	4e58      	ldr	r6, [pc, #352]	; (80025f4 <_svfiprintf_r+0x1f4>)
 8002492:	2205      	movs	r2, #5
 8002494:	7821      	ldrb	r1, [r4, #0]
 8002496:	0030      	movs	r0, r6
 8002498:	f000 fa3e 	bl	8002918 <memchr>
 800249c:	1c62      	adds	r2, r4, #1
 800249e:	2800      	cmp	r0, #0
 80024a0:	d120      	bne.n	80024e4 <_svfiprintf_r+0xe4>
 80024a2:	6829      	ldr	r1, [r5, #0]
 80024a4:	06cb      	lsls	r3, r1, #27
 80024a6:	d504      	bpl.n	80024b2 <_svfiprintf_r+0xb2>
 80024a8:	2353      	movs	r3, #83	; 0x53
 80024aa:	ae02      	add	r6, sp, #8
 80024ac:	3020      	adds	r0, #32
 80024ae:	199b      	adds	r3, r3, r6
 80024b0:	7018      	strb	r0, [r3, #0]
 80024b2:	070b      	lsls	r3, r1, #28
 80024b4:	d504      	bpl.n	80024c0 <_svfiprintf_r+0xc0>
 80024b6:	2353      	movs	r3, #83	; 0x53
 80024b8:	202b      	movs	r0, #43	; 0x2b
 80024ba:	ae02      	add	r6, sp, #8
 80024bc:	199b      	adds	r3, r3, r6
 80024be:	7018      	strb	r0, [r3, #0]
 80024c0:	7823      	ldrb	r3, [r4, #0]
 80024c2:	2b2a      	cmp	r3, #42	; 0x2a
 80024c4:	d016      	beq.n	80024f4 <_svfiprintf_r+0xf4>
 80024c6:	2000      	movs	r0, #0
 80024c8:	210a      	movs	r1, #10
 80024ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024cc:	7822      	ldrb	r2, [r4, #0]
 80024ce:	3a30      	subs	r2, #48	; 0x30
 80024d0:	2a09      	cmp	r2, #9
 80024d2:	d955      	bls.n	8002580 <_svfiprintf_r+0x180>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d015      	beq.n	8002504 <_svfiprintf_r+0x104>
 80024d8:	9309      	str	r3, [sp, #36]	; 0x24
 80024da:	e013      	b.n	8002504 <_svfiprintf_r+0x104>
 80024dc:	2b25      	cmp	r3, #37	; 0x25
 80024de:	d0b5      	beq.n	800244c <_svfiprintf_r+0x4c>
 80024e0:	3401      	adds	r4, #1
 80024e2:	e7b0      	b.n	8002446 <_svfiprintf_r+0x46>
 80024e4:	2301      	movs	r3, #1
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	4083      	lsls	r3, r0
 80024ea:	6829      	ldr	r1, [r5, #0]
 80024ec:	0014      	movs	r4, r2
 80024ee:	430b      	orrs	r3, r1
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	e7cd      	b.n	8002490 <_svfiprintf_r+0x90>
 80024f4:	9b05      	ldr	r3, [sp, #20]
 80024f6:	1d18      	adds	r0, r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	9005      	str	r0, [sp, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db39      	blt.n	8002574 <_svfiprintf_r+0x174>
 8002500:	9309      	str	r3, [sp, #36]	; 0x24
 8002502:	0014      	movs	r4, r2
 8002504:	7823      	ldrb	r3, [r4, #0]
 8002506:	2b2e      	cmp	r3, #46	; 0x2e
 8002508:	d10b      	bne.n	8002522 <_svfiprintf_r+0x122>
 800250a:	7863      	ldrb	r3, [r4, #1]
 800250c:	1c62      	adds	r2, r4, #1
 800250e:	2b2a      	cmp	r3, #42	; 0x2a
 8002510:	d13e      	bne.n	8002590 <_svfiprintf_r+0x190>
 8002512:	9b05      	ldr	r3, [sp, #20]
 8002514:	3402      	adds	r4, #2
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	9205      	str	r2, [sp, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db34      	blt.n	800258a <_svfiprintf_r+0x18a>
 8002520:	9307      	str	r3, [sp, #28]
 8002522:	4e35      	ldr	r6, [pc, #212]	; (80025f8 <_svfiprintf_r+0x1f8>)
 8002524:	7821      	ldrb	r1, [r4, #0]
 8002526:	2203      	movs	r2, #3
 8002528:	0030      	movs	r0, r6
 800252a:	f000 f9f5 	bl	8002918 <memchr>
 800252e:	2800      	cmp	r0, #0
 8002530:	d006      	beq.n	8002540 <_svfiprintf_r+0x140>
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	4083      	lsls	r3, r0
 8002538:	682a      	ldr	r2, [r5, #0]
 800253a:	3401      	adds	r4, #1
 800253c:	4313      	orrs	r3, r2
 800253e:	602b      	str	r3, [r5, #0]
 8002540:	7821      	ldrb	r1, [r4, #0]
 8002542:	2206      	movs	r2, #6
 8002544:	482d      	ldr	r0, [pc, #180]	; (80025fc <_svfiprintf_r+0x1fc>)
 8002546:	1c66      	adds	r6, r4, #1
 8002548:	7629      	strb	r1, [r5, #24]
 800254a:	f000 f9e5 	bl	8002918 <memchr>
 800254e:	2800      	cmp	r0, #0
 8002550:	d046      	beq.n	80025e0 <_svfiprintf_r+0x1e0>
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <_svfiprintf_r+0x200>)
 8002554:	2b00      	cmp	r3, #0
 8002556:	d12f      	bne.n	80025b8 <_svfiprintf_r+0x1b8>
 8002558:	6829      	ldr	r1, [r5, #0]
 800255a:	9b05      	ldr	r3, [sp, #20]
 800255c:	2207      	movs	r2, #7
 800255e:	05c9      	lsls	r1, r1, #23
 8002560:	d528      	bpl.n	80025b4 <_svfiprintf_r+0x1b4>
 8002562:	189b      	adds	r3, r3, r2
 8002564:	4393      	bics	r3, r2
 8002566:	3308      	adds	r3, #8
 8002568:	9305      	str	r3, [sp, #20]
 800256a:	696b      	ldr	r3, [r5, #20]
 800256c:	9a03      	ldr	r2, [sp, #12]
 800256e:	189b      	adds	r3, r3, r2
 8002570:	616b      	str	r3, [r5, #20]
 8002572:	e767      	b.n	8002444 <_svfiprintf_r+0x44>
 8002574:	425b      	negs	r3, r3
 8002576:	60eb      	str	r3, [r5, #12]
 8002578:	2302      	movs	r3, #2
 800257a:	430b      	orrs	r3, r1
 800257c:	602b      	str	r3, [r5, #0]
 800257e:	e7c0      	b.n	8002502 <_svfiprintf_r+0x102>
 8002580:	434b      	muls	r3, r1
 8002582:	3401      	adds	r4, #1
 8002584:	189b      	adds	r3, r3, r2
 8002586:	2001      	movs	r0, #1
 8002588:	e7a0      	b.n	80024cc <_svfiprintf_r+0xcc>
 800258a:	2301      	movs	r3, #1
 800258c:	425b      	negs	r3, r3
 800258e:	e7c7      	b.n	8002520 <_svfiprintf_r+0x120>
 8002590:	2300      	movs	r3, #0
 8002592:	0014      	movs	r4, r2
 8002594:	200a      	movs	r0, #10
 8002596:	001a      	movs	r2, r3
 8002598:	606b      	str	r3, [r5, #4]
 800259a:	7821      	ldrb	r1, [r4, #0]
 800259c:	3930      	subs	r1, #48	; 0x30
 800259e:	2909      	cmp	r1, #9
 80025a0:	d903      	bls.n	80025aa <_svfiprintf_r+0x1aa>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0bd      	beq.n	8002522 <_svfiprintf_r+0x122>
 80025a6:	9207      	str	r2, [sp, #28]
 80025a8:	e7bb      	b.n	8002522 <_svfiprintf_r+0x122>
 80025aa:	4342      	muls	r2, r0
 80025ac:	3401      	adds	r4, #1
 80025ae:	1852      	adds	r2, r2, r1
 80025b0:	2301      	movs	r3, #1
 80025b2:	e7f2      	b.n	800259a <_svfiprintf_r+0x19a>
 80025b4:	3307      	adds	r3, #7
 80025b6:	e7d5      	b.n	8002564 <_svfiprintf_r+0x164>
 80025b8:	ab05      	add	r3, sp, #20
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	003a      	movs	r2, r7
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <_svfiprintf_r+0x204>)
 80025c0:	0029      	movs	r1, r5
 80025c2:	9802      	ldr	r0, [sp, #8]
 80025c4:	e000      	b.n	80025c8 <_svfiprintf_r+0x1c8>
 80025c6:	bf00      	nop
 80025c8:	9003      	str	r0, [sp, #12]
 80025ca:	9b03      	ldr	r3, [sp, #12]
 80025cc:	3301      	adds	r3, #1
 80025ce:	d1cc      	bne.n	800256a <_svfiprintf_r+0x16a>
 80025d0:	89bb      	ldrh	r3, [r7, #12]
 80025d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80025d4:	065b      	lsls	r3, r3, #25
 80025d6:	d400      	bmi.n	80025da <_svfiprintf_r+0x1da>
 80025d8:	e729      	b.n	800242e <_svfiprintf_r+0x2e>
 80025da:	2001      	movs	r0, #1
 80025dc:	4240      	negs	r0, r0
 80025de:	e726      	b.n	800242e <_svfiprintf_r+0x2e>
 80025e0:	ab05      	add	r3, sp, #20
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	003a      	movs	r2, r7
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <_svfiprintf_r+0x204>)
 80025e8:	0029      	movs	r1, r5
 80025ea:	9802      	ldr	r0, [sp, #8]
 80025ec:	f000 f87a 	bl	80026e4 <_printf_i>
 80025f0:	e7ea      	b.n	80025c8 <_svfiprintf_r+0x1c8>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	08003392 	.word	0x08003392
 80025f8:	08003398 	.word	0x08003398
 80025fc:	0800339c 	.word	0x0800339c
 8002600:	00000000 	.word	0x00000000
 8002604:	0800233d 	.word	0x0800233d

08002608 <_printf_common>:
 8002608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800260a:	0015      	movs	r5, r2
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	688a      	ldr	r2, [r1, #8]
 8002610:	690b      	ldr	r3, [r1, #16]
 8002612:	9000      	str	r0, [sp, #0]
 8002614:	000c      	movs	r4, r1
 8002616:	4293      	cmp	r3, r2
 8002618:	da00      	bge.n	800261c <_printf_common+0x14>
 800261a:	0013      	movs	r3, r2
 800261c:	0022      	movs	r2, r4
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	3243      	adds	r2, #67	; 0x43
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	2a00      	cmp	r2, #0
 8002626:	d001      	beq.n	800262c <_printf_common+0x24>
 8002628:	3301      	adds	r3, #1
 800262a:	602b      	str	r3, [r5, #0]
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	d502      	bpl.n	8002638 <_printf_common+0x30>
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	3302      	adds	r3, #2
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	2706      	movs	r7, #6
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	401f      	ands	r7, r3
 800263e:	d027      	beq.n	8002690 <_printf_common+0x88>
 8002640:	0023      	movs	r3, r4
 8002642:	3343      	adds	r3, #67	; 0x43
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	4193      	sbcs	r3, r2
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	0692      	lsls	r2, r2, #26
 800264e:	d430      	bmi.n	80026b2 <_printf_common+0xaa>
 8002650:	0022      	movs	r2, r4
 8002652:	9901      	ldr	r1, [sp, #4]
 8002654:	3243      	adds	r2, #67	; 0x43
 8002656:	9800      	ldr	r0, [sp, #0]
 8002658:	9e08      	ldr	r6, [sp, #32]
 800265a:	47b0      	blx	r6
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d025      	beq.n	80026ac <_printf_common+0xa4>
 8002660:	2306      	movs	r3, #6
 8002662:	6820      	ldr	r0, [r4, #0]
 8002664:	682a      	ldr	r2, [r5, #0]
 8002666:	68e1      	ldr	r1, [r4, #12]
 8002668:	4003      	ands	r3, r0
 800266a:	2500      	movs	r5, #0
 800266c:	2b04      	cmp	r3, #4
 800266e:	d103      	bne.n	8002678 <_printf_common+0x70>
 8002670:	1a8d      	subs	r5, r1, r2
 8002672:	43eb      	mvns	r3, r5
 8002674:	17db      	asrs	r3, r3, #31
 8002676:	401d      	ands	r5, r3
 8002678:	68a3      	ldr	r3, [r4, #8]
 800267a:	6922      	ldr	r2, [r4, #16]
 800267c:	4293      	cmp	r3, r2
 800267e:	dd01      	ble.n	8002684 <_printf_common+0x7c>
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	18ed      	adds	r5, r5, r3
 8002684:	2700      	movs	r7, #0
 8002686:	42bd      	cmp	r5, r7
 8002688:	d120      	bne.n	80026cc <_printf_common+0xc4>
 800268a:	2000      	movs	r0, #0
 800268c:	e010      	b.n	80026b0 <_printf_common+0xa8>
 800268e:	3701      	adds	r7, #1
 8002690:	68e3      	ldr	r3, [r4, #12]
 8002692:	682a      	ldr	r2, [r5, #0]
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	429f      	cmp	r7, r3
 8002698:	dad2      	bge.n	8002640 <_printf_common+0x38>
 800269a:	0022      	movs	r2, r4
 800269c:	2301      	movs	r3, #1
 800269e:	3219      	adds	r2, #25
 80026a0:	9901      	ldr	r1, [sp, #4]
 80026a2:	9800      	ldr	r0, [sp, #0]
 80026a4:	9e08      	ldr	r6, [sp, #32]
 80026a6:	47b0      	blx	r6
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	d1f0      	bne.n	800268e <_printf_common+0x86>
 80026ac:	2001      	movs	r0, #1
 80026ae:	4240      	negs	r0, r0
 80026b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026b2:	2030      	movs	r0, #48	; 0x30
 80026b4:	18e1      	adds	r1, r4, r3
 80026b6:	3143      	adds	r1, #67	; 0x43
 80026b8:	7008      	strb	r0, [r1, #0]
 80026ba:	0021      	movs	r1, r4
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	3145      	adds	r1, #69	; 0x45
 80026c0:	7809      	ldrb	r1, [r1, #0]
 80026c2:	18a2      	adds	r2, r4, r2
 80026c4:	3243      	adds	r2, #67	; 0x43
 80026c6:	3302      	adds	r3, #2
 80026c8:	7011      	strb	r1, [r2, #0]
 80026ca:	e7c1      	b.n	8002650 <_printf_common+0x48>
 80026cc:	0022      	movs	r2, r4
 80026ce:	2301      	movs	r3, #1
 80026d0:	321a      	adds	r2, #26
 80026d2:	9901      	ldr	r1, [sp, #4]
 80026d4:	9800      	ldr	r0, [sp, #0]
 80026d6:	9e08      	ldr	r6, [sp, #32]
 80026d8:	47b0      	blx	r6
 80026da:	1c43      	adds	r3, r0, #1
 80026dc:	d0e6      	beq.n	80026ac <_printf_common+0xa4>
 80026de:	3701      	adds	r7, #1
 80026e0:	e7d1      	b.n	8002686 <_printf_common+0x7e>
	...

080026e4 <_printf_i>:
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
 80026e8:	9206      	str	r2, [sp, #24]
 80026ea:	000a      	movs	r2, r1
 80026ec:	3243      	adds	r2, #67	; 0x43
 80026ee:	9307      	str	r3, [sp, #28]
 80026f0:	9005      	str	r0, [sp, #20]
 80026f2:	9204      	str	r2, [sp, #16]
 80026f4:	7e0a      	ldrb	r2, [r1, #24]
 80026f6:	000c      	movs	r4, r1
 80026f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80026fa:	2a6e      	cmp	r2, #110	; 0x6e
 80026fc:	d100      	bne.n	8002700 <_printf_i+0x1c>
 80026fe:	e08f      	b.n	8002820 <_printf_i+0x13c>
 8002700:	d817      	bhi.n	8002732 <_printf_i+0x4e>
 8002702:	2a63      	cmp	r2, #99	; 0x63
 8002704:	d02c      	beq.n	8002760 <_printf_i+0x7c>
 8002706:	d808      	bhi.n	800271a <_printf_i+0x36>
 8002708:	2a00      	cmp	r2, #0
 800270a:	d100      	bne.n	800270e <_printf_i+0x2a>
 800270c:	e099      	b.n	8002842 <_printf_i+0x15e>
 800270e:	2a58      	cmp	r2, #88	; 0x58
 8002710:	d054      	beq.n	80027bc <_printf_i+0xd8>
 8002712:	0026      	movs	r6, r4
 8002714:	3642      	adds	r6, #66	; 0x42
 8002716:	7032      	strb	r2, [r6, #0]
 8002718:	e029      	b.n	800276e <_printf_i+0x8a>
 800271a:	2a64      	cmp	r2, #100	; 0x64
 800271c:	d001      	beq.n	8002722 <_printf_i+0x3e>
 800271e:	2a69      	cmp	r2, #105	; 0x69
 8002720:	d1f7      	bne.n	8002712 <_printf_i+0x2e>
 8002722:	6821      	ldr	r1, [r4, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	0608      	lsls	r0, r1, #24
 8002728:	d523      	bpl.n	8002772 <_printf_i+0x8e>
 800272a:	1d11      	adds	r1, r2, #4
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	6815      	ldr	r5, [r2, #0]
 8002730:	e025      	b.n	800277e <_printf_i+0x9a>
 8002732:	2a73      	cmp	r2, #115	; 0x73
 8002734:	d100      	bne.n	8002738 <_printf_i+0x54>
 8002736:	e088      	b.n	800284a <_printf_i+0x166>
 8002738:	d808      	bhi.n	800274c <_printf_i+0x68>
 800273a:	2a6f      	cmp	r2, #111	; 0x6f
 800273c:	d029      	beq.n	8002792 <_printf_i+0xae>
 800273e:	2a70      	cmp	r2, #112	; 0x70
 8002740:	d1e7      	bne.n	8002712 <_printf_i+0x2e>
 8002742:	2220      	movs	r2, #32
 8002744:	6809      	ldr	r1, [r1, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	6022      	str	r2, [r4, #0]
 800274a:	e003      	b.n	8002754 <_printf_i+0x70>
 800274c:	2a75      	cmp	r2, #117	; 0x75
 800274e:	d020      	beq.n	8002792 <_printf_i+0xae>
 8002750:	2a78      	cmp	r2, #120	; 0x78
 8002752:	d1de      	bne.n	8002712 <_printf_i+0x2e>
 8002754:	0022      	movs	r2, r4
 8002756:	2178      	movs	r1, #120	; 0x78
 8002758:	3245      	adds	r2, #69	; 0x45
 800275a:	7011      	strb	r1, [r2, #0]
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <_printf_i+0x22c>)
 800275e:	e030      	b.n	80027c2 <_printf_i+0xde>
 8002760:	000e      	movs	r6, r1
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	3642      	adds	r6, #66	; 0x42
 8002766:	1d11      	adds	r1, r2, #4
 8002768:	6019      	str	r1, [r3, #0]
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	7033      	strb	r3, [r6, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	e079      	b.n	8002866 <_printf_i+0x182>
 8002772:	0649      	lsls	r1, r1, #25
 8002774:	d5d9      	bpl.n	800272a <_printf_i+0x46>
 8002776:	1d11      	adds	r1, r2, #4
 8002778:	6019      	str	r1, [r3, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	5ed5      	ldrsh	r5, [r2, r3]
 800277e:	2d00      	cmp	r5, #0
 8002780:	da03      	bge.n	800278a <_printf_i+0xa6>
 8002782:	232d      	movs	r3, #45	; 0x2d
 8002784:	9a04      	ldr	r2, [sp, #16]
 8002786:	426d      	negs	r5, r5
 8002788:	7013      	strb	r3, [r2, #0]
 800278a:	4b62      	ldr	r3, [pc, #392]	; (8002914 <_printf_i+0x230>)
 800278c:	270a      	movs	r7, #10
 800278e:	9303      	str	r3, [sp, #12]
 8002790:	e02f      	b.n	80027f2 <_printf_i+0x10e>
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	0605      	lsls	r5, r0, #24
 8002798:	d503      	bpl.n	80027a2 <_printf_i+0xbe>
 800279a:	1d08      	adds	r0, r1, #4
 800279c:	6018      	str	r0, [r3, #0]
 800279e:	680d      	ldr	r5, [r1, #0]
 80027a0:	e005      	b.n	80027ae <_printf_i+0xca>
 80027a2:	0640      	lsls	r0, r0, #25
 80027a4:	d5f9      	bpl.n	800279a <_printf_i+0xb6>
 80027a6:	680d      	ldr	r5, [r1, #0]
 80027a8:	1d08      	adds	r0, r1, #4
 80027aa:	6018      	str	r0, [r3, #0]
 80027ac:	b2ad      	uxth	r5, r5
 80027ae:	4b59      	ldr	r3, [pc, #356]	; (8002914 <_printf_i+0x230>)
 80027b0:	2708      	movs	r7, #8
 80027b2:	9303      	str	r3, [sp, #12]
 80027b4:	2a6f      	cmp	r2, #111	; 0x6f
 80027b6:	d018      	beq.n	80027ea <_printf_i+0x106>
 80027b8:	270a      	movs	r7, #10
 80027ba:	e016      	b.n	80027ea <_printf_i+0x106>
 80027bc:	3145      	adds	r1, #69	; 0x45
 80027be:	700a      	strb	r2, [r1, #0]
 80027c0:	4a54      	ldr	r2, [pc, #336]	; (8002914 <_printf_i+0x230>)
 80027c2:	9203      	str	r2, [sp, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	6821      	ldr	r1, [r4, #0]
 80027c8:	1d10      	adds	r0, r2, #4
 80027ca:	6018      	str	r0, [r3, #0]
 80027cc:	6815      	ldr	r5, [r2, #0]
 80027ce:	0608      	lsls	r0, r1, #24
 80027d0:	d522      	bpl.n	8002818 <_printf_i+0x134>
 80027d2:	07cb      	lsls	r3, r1, #31
 80027d4:	d502      	bpl.n	80027dc <_printf_i+0xf8>
 80027d6:	2320      	movs	r3, #32
 80027d8:	4319      	orrs	r1, r3
 80027da:	6021      	str	r1, [r4, #0]
 80027dc:	2710      	movs	r7, #16
 80027de:	2d00      	cmp	r5, #0
 80027e0:	d103      	bne.n	80027ea <_printf_i+0x106>
 80027e2:	2320      	movs	r3, #32
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	439a      	bics	r2, r3
 80027e8:	6022      	str	r2, [r4, #0]
 80027ea:	0023      	movs	r3, r4
 80027ec:	2200      	movs	r2, #0
 80027ee:	3343      	adds	r3, #67	; 0x43
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	60a3      	str	r3, [r4, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db5c      	blt.n	80028b4 <_printf_i+0x1d0>
 80027fa:	2204      	movs	r2, #4
 80027fc:	6821      	ldr	r1, [r4, #0]
 80027fe:	4391      	bics	r1, r2
 8002800:	6021      	str	r1, [r4, #0]
 8002802:	2d00      	cmp	r5, #0
 8002804:	d158      	bne.n	80028b8 <_printf_i+0x1d4>
 8002806:	9e04      	ldr	r6, [sp, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d064      	beq.n	80028d6 <_printf_i+0x1f2>
 800280c:	0026      	movs	r6, r4
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	3642      	adds	r6, #66	; 0x42
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	7033      	strb	r3, [r6, #0]
 8002816:	e05e      	b.n	80028d6 <_printf_i+0x1f2>
 8002818:	0648      	lsls	r0, r1, #25
 800281a:	d5da      	bpl.n	80027d2 <_printf_i+0xee>
 800281c:	b2ad      	uxth	r5, r5
 800281e:	e7d8      	b.n	80027d2 <_printf_i+0xee>
 8002820:	6809      	ldr	r1, [r1, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	0608      	lsls	r0, r1, #24
 8002826:	d505      	bpl.n	8002834 <_printf_i+0x150>
 8002828:	1d11      	adds	r1, r2, #4
 800282a:	6019      	str	r1, [r3, #0]
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	6962      	ldr	r2, [r4, #20]
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e006      	b.n	8002842 <_printf_i+0x15e>
 8002834:	0649      	lsls	r1, r1, #25
 8002836:	d5f7      	bpl.n	8002828 <_printf_i+0x144>
 8002838:	1d11      	adds	r1, r2, #4
 800283a:	6019      	str	r1, [r3, #0]
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	8aa2      	ldrh	r2, [r4, #20]
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	9e04      	ldr	r6, [sp, #16]
 8002846:	6123      	str	r3, [r4, #16]
 8002848:	e054      	b.n	80028f4 <_printf_i+0x210>
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	1d11      	adds	r1, r2, #4
 800284e:	6019      	str	r1, [r3, #0]
 8002850:	6816      	ldr	r6, [r2, #0]
 8002852:	2100      	movs	r1, #0
 8002854:	6862      	ldr	r2, [r4, #4]
 8002856:	0030      	movs	r0, r6
 8002858:	f000 f85e 	bl	8002918 <memchr>
 800285c:	2800      	cmp	r0, #0
 800285e:	d001      	beq.n	8002864 <_printf_i+0x180>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	6060      	str	r0, [r4, #4]
 8002864:	6863      	ldr	r3, [r4, #4]
 8002866:	6123      	str	r3, [r4, #16]
 8002868:	2300      	movs	r3, #0
 800286a:	9a04      	ldr	r2, [sp, #16]
 800286c:	7013      	strb	r3, [r2, #0]
 800286e:	e041      	b.n	80028f4 <_printf_i+0x210>
 8002870:	6923      	ldr	r3, [r4, #16]
 8002872:	0032      	movs	r2, r6
 8002874:	9906      	ldr	r1, [sp, #24]
 8002876:	9805      	ldr	r0, [sp, #20]
 8002878:	9d07      	ldr	r5, [sp, #28]
 800287a:	47a8      	blx	r5
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d043      	beq.n	8002908 <_printf_i+0x224>
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	2500      	movs	r5, #0
 8002884:	079b      	lsls	r3, r3, #30
 8002886:	d40f      	bmi.n	80028a8 <_printf_i+0x1c4>
 8002888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800288a:	68e0      	ldr	r0, [r4, #12]
 800288c:	4298      	cmp	r0, r3
 800288e:	da3d      	bge.n	800290c <_printf_i+0x228>
 8002890:	0018      	movs	r0, r3
 8002892:	e03b      	b.n	800290c <_printf_i+0x228>
 8002894:	0022      	movs	r2, r4
 8002896:	2301      	movs	r3, #1
 8002898:	3219      	adds	r2, #25
 800289a:	9906      	ldr	r1, [sp, #24]
 800289c:	9805      	ldr	r0, [sp, #20]
 800289e:	9e07      	ldr	r6, [sp, #28]
 80028a0:	47b0      	blx	r6
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	d030      	beq.n	8002908 <_printf_i+0x224>
 80028a6:	3501      	adds	r5, #1
 80028a8:	68e3      	ldr	r3, [r4, #12]
 80028aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	429d      	cmp	r5, r3
 80028b0:	dbf0      	blt.n	8002894 <_printf_i+0x1b0>
 80028b2:	e7e9      	b.n	8002888 <_printf_i+0x1a4>
 80028b4:	2d00      	cmp	r5, #0
 80028b6:	d0a9      	beq.n	800280c <_printf_i+0x128>
 80028b8:	9e04      	ldr	r6, [sp, #16]
 80028ba:	0028      	movs	r0, r5
 80028bc:	0039      	movs	r1, r7
 80028be:	f7fd fca9 	bl	8000214 <__aeabi_uidivmod>
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	3e01      	subs	r6, #1
 80028c6:	5c5b      	ldrb	r3, [r3, r1]
 80028c8:	0028      	movs	r0, r5
 80028ca:	7033      	strb	r3, [r6, #0]
 80028cc:	0039      	movs	r1, r7
 80028ce:	f7fd fc1b 	bl	8000108 <__udivsi3>
 80028d2:	1e05      	subs	r5, r0, #0
 80028d4:	d1f1      	bne.n	80028ba <_printf_i+0x1d6>
 80028d6:	2f08      	cmp	r7, #8
 80028d8:	d109      	bne.n	80028ee <_printf_i+0x20a>
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	07db      	lsls	r3, r3, #31
 80028de:	d506      	bpl.n	80028ee <_printf_i+0x20a>
 80028e0:	6863      	ldr	r3, [r4, #4]
 80028e2:	6922      	ldr	r2, [r4, #16]
 80028e4:	4293      	cmp	r3, r2
 80028e6:	dc02      	bgt.n	80028ee <_printf_i+0x20a>
 80028e8:	2330      	movs	r3, #48	; 0x30
 80028ea:	3e01      	subs	r6, #1
 80028ec:	7033      	strb	r3, [r6, #0]
 80028ee:	9b04      	ldr	r3, [sp, #16]
 80028f0:	1b9b      	subs	r3, r3, r6
 80028f2:	6123      	str	r3, [r4, #16]
 80028f4:	9b07      	ldr	r3, [sp, #28]
 80028f6:	aa09      	add	r2, sp, #36	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	0021      	movs	r1, r4
 80028fc:	9b06      	ldr	r3, [sp, #24]
 80028fe:	9805      	ldr	r0, [sp, #20]
 8002900:	f7ff fe82 	bl	8002608 <_printf_common>
 8002904:	1c43      	adds	r3, r0, #1
 8002906:	d1b3      	bne.n	8002870 <_printf_i+0x18c>
 8002908:	2001      	movs	r0, #1
 800290a:	4240      	negs	r0, r0
 800290c:	b00b      	add	sp, #44	; 0x2c
 800290e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002910:	080033b4 	.word	0x080033b4
 8002914:	080033a3 	.word	0x080033a3

08002918 <memchr>:
 8002918:	b2c9      	uxtb	r1, r1
 800291a:	1882      	adds	r2, r0, r2
 800291c:	4290      	cmp	r0, r2
 800291e:	d101      	bne.n	8002924 <memchr+0xc>
 8002920:	2000      	movs	r0, #0
 8002922:	4770      	bx	lr
 8002924:	7803      	ldrb	r3, [r0, #0]
 8002926:	428b      	cmp	r3, r1
 8002928:	d0fb      	beq.n	8002922 <memchr+0xa>
 800292a:	3001      	adds	r0, #1
 800292c:	e7f6      	b.n	800291c <memchr+0x4>

0800292e <memmove>:
 800292e:	b510      	push	{r4, lr}
 8002930:	4288      	cmp	r0, r1
 8002932:	d902      	bls.n	800293a <memmove+0xc>
 8002934:	188b      	adds	r3, r1, r2
 8002936:	4298      	cmp	r0, r3
 8002938:	d308      	bcc.n	800294c <memmove+0x1e>
 800293a:	2300      	movs	r3, #0
 800293c:	429a      	cmp	r2, r3
 800293e:	d007      	beq.n	8002950 <memmove+0x22>
 8002940:	5ccc      	ldrb	r4, [r1, r3]
 8002942:	54c4      	strb	r4, [r0, r3]
 8002944:	3301      	adds	r3, #1
 8002946:	e7f9      	b.n	800293c <memmove+0xe>
 8002948:	5c8b      	ldrb	r3, [r1, r2]
 800294a:	5483      	strb	r3, [r0, r2]
 800294c:	3a01      	subs	r2, #1
 800294e:	d2fb      	bcs.n	8002948 <memmove+0x1a>
 8002950:	bd10      	pop	{r4, pc}
	...

08002954 <_free_r>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	0005      	movs	r5, r0
 8002958:	2900      	cmp	r1, #0
 800295a:	d010      	beq.n	800297e <_free_r+0x2a>
 800295c:	1f0c      	subs	r4, r1, #4
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da00      	bge.n	8002966 <_free_r+0x12>
 8002964:	18e4      	adds	r4, r4, r3
 8002966:	0028      	movs	r0, r5
 8002968:	f000 f8d4 	bl	8002b14 <__malloc_lock>
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <_free_r+0x90>)
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <_free_r+0x2c>
 8002974:	6063      	str	r3, [r4, #4]
 8002976:	6014      	str	r4, [r2, #0]
 8002978:	0028      	movs	r0, r5
 800297a:	f000 f8cc 	bl	8002b16 <__malloc_unlock>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	42a3      	cmp	r3, r4
 8002982:	d909      	bls.n	8002998 <_free_r+0x44>
 8002984:	6821      	ldr	r1, [r4, #0]
 8002986:	1860      	adds	r0, r4, r1
 8002988:	4283      	cmp	r3, r0
 800298a:	d1f3      	bne.n	8002974 <_free_r+0x20>
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	1841      	adds	r1, r0, r1
 8002992:	6021      	str	r1, [r4, #0]
 8002994:	e7ee      	b.n	8002974 <_free_r+0x20>
 8002996:	0013      	movs	r3, r2
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d001      	beq.n	80029a2 <_free_r+0x4e>
 800299e:	42a2      	cmp	r2, r4
 80029a0:	d9f9      	bls.n	8002996 <_free_r+0x42>
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	1858      	adds	r0, r3, r1
 80029a6:	42a0      	cmp	r0, r4
 80029a8:	d10b      	bne.n	80029c2 <_free_r+0x6e>
 80029aa:	6820      	ldr	r0, [r4, #0]
 80029ac:	1809      	adds	r1, r1, r0
 80029ae:	1858      	adds	r0, r3, r1
 80029b0:	6019      	str	r1, [r3, #0]
 80029b2:	4282      	cmp	r2, r0
 80029b4:	d1e0      	bne.n	8002978 <_free_r+0x24>
 80029b6:	6810      	ldr	r0, [r2, #0]
 80029b8:	6852      	ldr	r2, [r2, #4]
 80029ba:	1841      	adds	r1, r0, r1
 80029bc:	6019      	str	r1, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e7da      	b.n	8002978 <_free_r+0x24>
 80029c2:	42a0      	cmp	r0, r4
 80029c4:	d902      	bls.n	80029cc <_free_r+0x78>
 80029c6:	230c      	movs	r3, #12
 80029c8:	602b      	str	r3, [r5, #0]
 80029ca:	e7d5      	b.n	8002978 <_free_r+0x24>
 80029cc:	6821      	ldr	r1, [r4, #0]
 80029ce:	1860      	adds	r0, r4, r1
 80029d0:	4282      	cmp	r2, r0
 80029d2:	d103      	bne.n	80029dc <_free_r+0x88>
 80029d4:	6810      	ldr	r0, [r2, #0]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	1841      	adds	r1, r0, r1
 80029da:	6021      	str	r1, [r4, #0]
 80029dc:	6062      	str	r2, [r4, #4]
 80029de:	605c      	str	r4, [r3, #4]
 80029e0:	e7ca      	b.n	8002978 <_free_r+0x24>
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000494 	.word	0x20000494

080029e8 <_malloc_r>:
 80029e8:	2303      	movs	r3, #3
 80029ea:	b570      	push	{r4, r5, r6, lr}
 80029ec:	1ccd      	adds	r5, r1, #3
 80029ee:	439d      	bics	r5, r3
 80029f0:	3508      	adds	r5, #8
 80029f2:	0006      	movs	r6, r0
 80029f4:	2d0c      	cmp	r5, #12
 80029f6:	d21e      	bcs.n	8002a36 <_malloc_r+0x4e>
 80029f8:	250c      	movs	r5, #12
 80029fa:	42a9      	cmp	r1, r5
 80029fc:	d81d      	bhi.n	8002a3a <_malloc_r+0x52>
 80029fe:	0030      	movs	r0, r6
 8002a00:	f000 f888 	bl	8002b14 <__malloc_lock>
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <_malloc_r+0xb4>)
 8002a06:	6814      	ldr	r4, [r2, #0]
 8002a08:	0021      	movs	r1, r4
 8002a0a:	2900      	cmp	r1, #0
 8002a0c:	d119      	bne.n	8002a42 <_malloc_r+0x5a>
 8002a0e:	4c24      	ldr	r4, [pc, #144]	; (8002aa0 <_malloc_r+0xb8>)
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <_malloc_r+0x36>
 8002a16:	0030      	movs	r0, r6
 8002a18:	f000 f86a 	bl	8002af0 <_sbrk_r>
 8002a1c:	6020      	str	r0, [r4, #0]
 8002a1e:	0029      	movs	r1, r5
 8002a20:	0030      	movs	r0, r6
 8002a22:	f000 f865 	bl	8002af0 <_sbrk_r>
 8002a26:	1c43      	adds	r3, r0, #1
 8002a28:	d12c      	bne.n	8002a84 <_malloc_r+0x9c>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	0030      	movs	r0, r6
 8002a2e:	6033      	str	r3, [r6, #0]
 8002a30:	f000 f871 	bl	8002b16 <__malloc_unlock>
 8002a34:	e003      	b.n	8002a3e <_malloc_r+0x56>
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	dadf      	bge.n	80029fa <_malloc_r+0x12>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	6033      	str	r3, [r6, #0]
 8002a3e:	2000      	movs	r0, #0
 8002a40:	bd70      	pop	{r4, r5, r6, pc}
 8002a42:	680b      	ldr	r3, [r1, #0]
 8002a44:	1b5b      	subs	r3, r3, r5
 8002a46:	d41a      	bmi.n	8002a7e <_malloc_r+0x96>
 8002a48:	2b0b      	cmp	r3, #11
 8002a4a:	d903      	bls.n	8002a54 <_malloc_r+0x6c>
 8002a4c:	600b      	str	r3, [r1, #0]
 8002a4e:	18cc      	adds	r4, r1, r3
 8002a50:	6025      	str	r5, [r4, #0]
 8002a52:	e003      	b.n	8002a5c <_malloc_r+0x74>
 8002a54:	428c      	cmp	r4, r1
 8002a56:	d10e      	bne.n	8002a76 <_malloc_r+0x8e>
 8002a58:	6863      	ldr	r3, [r4, #4]
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	0030      	movs	r0, r6
 8002a5e:	f000 f85a 	bl	8002b16 <__malloc_unlock>
 8002a62:	0020      	movs	r0, r4
 8002a64:	2207      	movs	r2, #7
 8002a66:	300b      	adds	r0, #11
 8002a68:	1d23      	adds	r3, r4, #4
 8002a6a:	4390      	bics	r0, r2
 8002a6c:	1ac3      	subs	r3, r0, r3
 8002a6e:	d0e7      	beq.n	8002a40 <_malloc_r+0x58>
 8002a70:	425a      	negs	r2, r3
 8002a72:	50e2      	str	r2, [r4, r3]
 8002a74:	e7e4      	b.n	8002a40 <_malloc_r+0x58>
 8002a76:	684b      	ldr	r3, [r1, #4]
 8002a78:	6063      	str	r3, [r4, #4]
 8002a7a:	000c      	movs	r4, r1
 8002a7c:	e7ee      	b.n	8002a5c <_malloc_r+0x74>
 8002a7e:	000c      	movs	r4, r1
 8002a80:	6849      	ldr	r1, [r1, #4]
 8002a82:	e7c2      	b.n	8002a0a <_malloc_r+0x22>
 8002a84:	2303      	movs	r3, #3
 8002a86:	1cc4      	adds	r4, r0, #3
 8002a88:	439c      	bics	r4, r3
 8002a8a:	42a0      	cmp	r0, r4
 8002a8c:	d0e0      	beq.n	8002a50 <_malloc_r+0x68>
 8002a8e:	1a21      	subs	r1, r4, r0
 8002a90:	0030      	movs	r0, r6
 8002a92:	f000 f82d 	bl	8002af0 <_sbrk_r>
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	d1da      	bne.n	8002a50 <_malloc_r+0x68>
 8002a9a:	e7c6      	b.n	8002a2a <_malloc_r+0x42>
 8002a9c:	20000494 	.word	0x20000494
 8002aa0:	20000498 	.word	0x20000498

08002aa4 <_realloc_r>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	0007      	movs	r7, r0
 8002aa8:	000d      	movs	r5, r1
 8002aaa:	0016      	movs	r6, r2
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d105      	bne.n	8002abc <_realloc_r+0x18>
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	f7ff ff99 	bl	80029e8 <_malloc_r>
 8002ab6:	0004      	movs	r4, r0
 8002ab8:	0020      	movs	r0, r4
 8002aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d103      	bne.n	8002ac8 <_realloc_r+0x24>
 8002ac0:	f7ff ff48 	bl	8002954 <_free_r>
 8002ac4:	0034      	movs	r4, r6
 8002ac6:	e7f7      	b.n	8002ab8 <_realloc_r+0x14>
 8002ac8:	f000 f826 	bl	8002b18 <_malloc_usable_size_r>
 8002acc:	002c      	movs	r4, r5
 8002ace:	4286      	cmp	r6, r0
 8002ad0:	d9f2      	bls.n	8002ab8 <_realloc_r+0x14>
 8002ad2:	0031      	movs	r1, r6
 8002ad4:	0038      	movs	r0, r7
 8002ad6:	f7ff ff87 	bl	80029e8 <_malloc_r>
 8002ada:	1e04      	subs	r4, r0, #0
 8002adc:	d0ec      	beq.n	8002ab8 <_realloc_r+0x14>
 8002ade:	0029      	movs	r1, r5
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	f7ff fbf7 	bl	80022d4 <memcpy>
 8002ae6:	0029      	movs	r1, r5
 8002ae8:	0038      	movs	r0, r7
 8002aea:	f7ff ff33 	bl	8002954 <_free_r>
 8002aee:	e7e3      	b.n	8002ab8 <_realloc_r+0x14>

08002af0 <_sbrk_r>:
 8002af0:	2300      	movs	r3, #0
 8002af2:	b570      	push	{r4, r5, r6, lr}
 8002af4:	4c06      	ldr	r4, [pc, #24]	; (8002b10 <_sbrk_r+0x20>)
 8002af6:	0005      	movs	r5, r0
 8002af8:	0008      	movs	r0, r1
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	f000 f814 	bl	8002b28 <_sbrk>
 8002b00:	1c43      	adds	r3, r0, #1
 8002b02:	d103      	bne.n	8002b0c <_sbrk_r+0x1c>
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d000      	beq.n	8002b0c <_sbrk_r+0x1c>
 8002b0a:	602b      	str	r3, [r5, #0]
 8002b0c:	bd70      	pop	{r4, r5, r6, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000548 	.word	0x20000548

08002b14 <__malloc_lock>:
 8002b14:	4770      	bx	lr

08002b16 <__malloc_unlock>:
 8002b16:	4770      	bx	lr

08002b18 <_malloc_usable_size_r>:
 8002b18:	1f0b      	subs	r3, r1, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1f18      	subs	r0, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da01      	bge.n	8002b26 <_malloc_usable_size_r+0xe>
 8002b22:	580b      	ldr	r3, [r1, r0]
 8002b24:	18c0      	adds	r0, r0, r3
 8002b26:	4770      	bx	lr

08002b28 <_sbrk>:
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <_sbrk+0x18>)
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	2900      	cmp	r1, #0
 8002b30:	d101      	bne.n	8002b36 <_sbrk+0xe>
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <_sbrk+0x1c>)
 8002b34:	6019      	str	r1, [r3, #0]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	1882      	adds	r2, r0, r2
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4770      	bx	lr
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	2000049c 	.word	0x2000049c
 8002b44:	2000054c 	.word	0x2000054c

08002b48 <_init>:
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4e:	bc08      	pop	{r3}
 8002b50:	469e      	mov	lr, r3
 8002b52:	4770      	bx	lr

08002b54 <_fini>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr
